package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.psi.easymanager.module.PxFormatInfo;
import com.psi.easymanager.module.PxMethodInfo;
import com.psi.easymanager.module.PxOptReason;
import com.psi.easymanager.module.PxOrderDetails;
import com.psi.easymanager.module.PxOrderInfo;
import com.psi.easymanager.module.PxProductInfo;

import com.psi.easymanager.module.PxOrderDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OrderDetails".
*/
public class PxOrderDetailsDao extends AbstractDao<PxOrderDetails, Long> {

    public static final String TABLENAME = "OrderDetails";

    /**
     * Properties of entity PxOrderDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Price = new Property(2, Double.class, "price", false, "PRICE");
        public final static Property VipPrice = new Property(3, Double.class, "vipPrice", false, "VIP_PRICE");
        public final static Property Num = new Property(4, Double.class, "num", false, "NUM");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property DiscountRate = new Property(6, Integer.class, "discountRate", false, "DISCOUNT_RATE");
        public final static Property IsDiscount = new Property(7, String.class, "isDiscount", false, "IS_DISCOUNT");
        public final static Property OrderStatus = new Property(8, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property MultipleUnitNumber = new Property(9, Double.class, "multipleUnitNumber", false, "MULTIPLE_UNIT_NUMBER");
        public final static Property IsServing = new Property(10, Boolean.class, "isServing", false, "IS_SERVING");
        public final static Property OperateTime = new Property(11, java.util.Date.class, "operateTime", false, "OPERATE_TIME");
        public final static Property IsPrinted = new Property(12, Boolean.class, "isPrinted", false, "IS_PRINTED");
        public final static Property FinalPrice = new Property(13, Double.class, "finalPrice", false, "FINAL_PRICE");
        public final static Property IsClear = new Property(14, Boolean.class, "isClear", false, "IS_CLEAR");
        public final static Property InCombo = new Property(15, String.class, "inCombo", false, "IN_COMBO");
        public final static Property IsComboDetails = new Property(16, String.class, "isComboDetails", false, "IS_COMBO_DETAILS");
        public final static Property IsComboTemporaryDetails = new Property(17, Boolean.class, "isComboTemporaryDetails", false, "IS_COMBO_TEMPORARY_DETAILS");
        public final static Property ChooseType = new Property(18, String.class, "chooseType", false, "CHOOSE_TYPE");
        public final static Property IsGift = new Property(19, String.class, "isGift", false, "IS_GIFT");
        public final static Property Remarks = new Property(20, String.class, "remarks", false, "REMARKS");
        public final static Property UnitPrice = new Property(21, Double.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property UnitVipPrice = new Property(22, Double.class, "unitVipPrice", false, "UNIT_VIP_PRICE");
        public final static Property RefundNum = new Property(23, Double.class, "refundNum", false, "REFUND_NUM");
        public final static Property RefundMultNum = new Property(24, Double.class, "refundMultNum", false, "REFUND_MULT_NUM");
        public final static Property PxOrderInfoId = new Property(25, Long.class, "pxOrderInfoId", false, "PX_ORDER_INFO_ID");
        public final static Property PxProductInfoId = new Property(26, Long.class, "pxProductInfoId", false, "PX_PRODUCT_INFO_ID");
        public final static Property PxComboDetailsId = new Property(27, Long.class, "pxComboDetailsId", false, "PX_COMBO_DETAILS_ID");
        public final static Property PxFormatInfoId = new Property(28, Long.class, "pxFormatInfoId", false, "PX_FORMAT_INFO_ID");
        public final static Property PxMethodInfoId = new Property(29, Long.class, "pxMethodInfoId", false, "PX_METHOD_INFO_ID");
        public final static Property PxOptReasonId = new Property(30, Long.class, "pxOptReasonId", false, "PX_OPT_REASON_ID");
    };

    private DaoSession daoSession;

    private Query<PxOrderDetails> pxOrderInfo_DbOrderDetailsListQuery;
    private Query<PxOrderDetails> pxProductInfo_DbOrderDetailsListQuery;
    private Query<PxOrderDetails> pxOrderDetails_DbDetailsInComboQuery;

    public PxOrderDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public PxOrderDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OrderDetails\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"PRICE\" REAL," + // 2: price
                "\"VIP_PRICE\" REAL," + // 3: vipPrice
                "\"NUM\" REAL," + // 4: num
                "\"STATUS\" TEXT," + // 5: status
                "\"DISCOUNT_RATE\" INTEGER," + // 6: discountRate
                "\"IS_DISCOUNT\" TEXT," + // 7: isDiscount
                "\"ORDER_STATUS\" TEXT," + // 8: orderStatus
                "\"MULTIPLE_UNIT_NUMBER\" REAL," + // 9: multipleUnitNumber
                "\"IS_SERVING\" INTEGER," + // 10: isServing
                "\"OPERATE_TIME\" INTEGER," + // 11: operateTime
                "\"IS_PRINTED\" INTEGER," + // 12: isPrinted
                "\"FINAL_PRICE\" REAL," + // 13: finalPrice
                "\"IS_CLEAR\" INTEGER," + // 14: isClear
                "\"IN_COMBO\" TEXT," + // 15: inCombo
                "\"IS_COMBO_DETAILS\" TEXT," + // 16: isComboDetails
                "\"IS_COMBO_TEMPORARY_DETAILS\" INTEGER," + // 17: isComboTemporaryDetails
                "\"CHOOSE_TYPE\" TEXT," + // 18: chooseType
                "\"IS_GIFT\" TEXT," + // 19: isGift
                "\"REMARKS\" TEXT," + // 20: remarks
                "\"UNIT_PRICE\" REAL," + // 21: unitPrice
                "\"UNIT_VIP_PRICE\" REAL," + // 22: unitVipPrice
                "\"REFUND_NUM\" REAL," + // 23: refundNum
                "\"REFUND_MULT_NUM\" REAL," + // 24: refundMultNum
                "\"PX_ORDER_INFO_ID\" INTEGER," + // 25: pxOrderInfoId
                "\"PX_PRODUCT_INFO_ID\" INTEGER," + // 26: pxProductInfoId
                "\"PX_COMBO_DETAILS_ID\" INTEGER," + // 27: pxComboDetailsId
                "\"PX_FORMAT_INFO_ID\" INTEGER," + // 28: pxFormatInfoId
                "\"PX_METHOD_INFO_ID\" INTEGER," + // 29: pxMethodInfoId
                "\"PX_OPT_REASON_ID\" INTEGER);"); // 30: pxOptReasonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OrderDetails\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxOrderDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(3, price);
        }
 
        Double vipPrice = entity.getVipPrice();
        if (vipPrice != null) {
            stmt.bindDouble(4, vipPrice);
        }
 
        Double num = entity.getNum();
        if (num != null) {
            stmt.bindDouble(5, num);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        Integer discountRate = entity.getDiscountRate();
        if (discountRate != null) {
            stmt.bindLong(7, discountRate);
        }
 
        String isDiscount = entity.getIsDiscount();
        if (isDiscount != null) {
            stmt.bindString(8, isDiscount);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(9, orderStatus);
        }
 
        Double multipleUnitNumber = entity.getMultipleUnitNumber();
        if (multipleUnitNumber != null) {
            stmt.bindDouble(10, multipleUnitNumber);
        }
 
        Boolean isServing = entity.getIsServing();
        if (isServing != null) {
            stmt.bindLong(11, isServing ? 1L: 0L);
        }
 
        java.util.Date operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindLong(12, operateTime.getTime());
        }
 
        Boolean isPrinted = entity.getIsPrinted();
        if (isPrinted != null) {
            stmt.bindLong(13, isPrinted ? 1L: 0L);
        }
 
        Double finalPrice = entity.getFinalPrice();
        if (finalPrice != null) {
            stmt.bindDouble(14, finalPrice);
        }
 
        Boolean isClear = entity.getIsClear();
        if (isClear != null) {
            stmt.bindLong(15, isClear ? 1L: 0L);
        }
 
        String inCombo = entity.getInCombo();
        if (inCombo != null) {
            stmt.bindString(16, inCombo);
        }
 
        String isComboDetails = entity.getIsComboDetails();
        if (isComboDetails != null) {
            stmt.bindString(17, isComboDetails);
        }
 
        Boolean isComboTemporaryDetails = entity.getIsComboTemporaryDetails();
        if (isComboTemporaryDetails != null) {
            stmt.bindLong(18, isComboTemporaryDetails ? 1L: 0L);
        }
 
        String chooseType = entity.getChooseType();
        if (chooseType != null) {
            stmt.bindString(19, chooseType);
        }
 
        String isGift = entity.getIsGift();
        if (isGift != null) {
            stmt.bindString(20, isGift);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(21, remarks);
        }
 
        Double unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindDouble(22, unitPrice);
        }
 
        Double unitVipPrice = entity.getUnitVipPrice();
        if (unitVipPrice != null) {
            stmt.bindDouble(23, unitVipPrice);
        }
 
        Double refundNum = entity.getRefundNum();
        if (refundNum != null) {
            stmt.bindDouble(24, refundNum);
        }
 
        Double refundMultNum = entity.getRefundMultNum();
        if (refundMultNum != null) {
            stmt.bindDouble(25, refundMultNum);
        }
 
        Long pxOrderInfoId = entity.getPxOrderInfoId();
        if (pxOrderInfoId != null) {
            stmt.bindLong(26, pxOrderInfoId);
        }
 
        Long pxProductInfoId = entity.getPxProductInfoId();
        if (pxProductInfoId != null) {
            stmt.bindLong(27, pxProductInfoId);
        }
 
        Long pxComboDetailsId = entity.getPxComboDetailsId();
        if (pxComboDetailsId != null) {
            stmt.bindLong(28, pxComboDetailsId);
        }
 
        Long pxFormatInfoId = entity.getPxFormatInfoId();
        if (pxFormatInfoId != null) {
            stmt.bindLong(29, pxFormatInfoId);
        }
 
        Long pxMethodInfoId = entity.getPxMethodInfoId();
        if (pxMethodInfoId != null) {
            stmt.bindLong(30, pxMethodInfoId);
        }
 
        Long pxOptReasonId = entity.getPxOptReasonId();
        if (pxOptReasonId != null) {
            stmt.bindLong(31, pxOptReasonId);
        }
    }

    @Override
    protected void attachEntity(PxOrderDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxOrderDetails readEntity(Cursor cursor, int offset) {
        PxOrderDetails entity = new PxOrderDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // vipPrice
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // num
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // discountRate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isDiscount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orderStatus
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // multipleUnitNumber
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isServing
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // operateTime
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isPrinted
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // finalPrice
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // isClear
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // inCombo
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // isComboDetails
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // isComboTemporaryDetails
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // chooseType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // isGift
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // remarks
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // unitPrice
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // unitVipPrice
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // refundNum
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // refundMultNum
            cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25), // pxOrderInfoId
            cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // pxProductInfoId
            cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27), // pxComboDetailsId
            cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28), // pxFormatInfoId
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29), // pxMethodInfoId
            cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30) // pxOptReasonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxOrderDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setVipPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setNum(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiscountRate(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsDiscount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMultipleUnitNumber(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setIsServing(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setOperateTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setIsPrinted(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setFinalPrice(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setIsClear(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setInCombo(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsComboDetails(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIsComboTemporaryDetails(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setChooseType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsGift(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setRemarks(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setUnitPrice(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setUnitVipPrice(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setRefundNum(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setRefundMultNum(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setPxOrderInfoId(cursor.isNull(offset + 25) ? null : cursor.getLong(offset + 25));
        entity.setPxProductInfoId(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setPxComboDetailsId(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
        entity.setPxFormatInfoId(cursor.isNull(offset + 28) ? null : cursor.getLong(offset + 28));
        entity.setPxMethodInfoId(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
        entity.setPxOptReasonId(cursor.isNull(offset + 30) ? null : cursor.getLong(offset + 30));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxOrderDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxOrderDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dbOrderDetailsList" to-many relationship of PxOrderInfo. */
    public List<PxOrderDetails> _queryPxOrderInfo_DbOrderDetailsList(Long pxOrderInfoId) {
        synchronized (this) {
            if (pxOrderInfo_DbOrderDetailsListQuery == null) {
                QueryBuilder<PxOrderDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PxOrderInfoId.eq(null));
                pxOrderInfo_DbOrderDetailsListQuery = queryBuilder.build();
            }
        }
        Query<PxOrderDetails> query = pxOrderInfo_DbOrderDetailsListQuery.forCurrentThread();
        query.setParameter(0, pxOrderInfoId);
        return query.list();
    }

    /** Internal query to resolve the "dbOrderDetailsList" to-many relationship of PxProductInfo. */
    public List<PxOrderDetails> _queryPxProductInfo_DbOrderDetailsList(Long pxProductInfoId) {
        synchronized (this) {
            if (pxProductInfo_DbOrderDetailsListQuery == null) {
                QueryBuilder<PxOrderDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PxProductInfoId.eq(null));
                pxProductInfo_DbOrderDetailsListQuery = queryBuilder.build();
            }
        }
        Query<PxOrderDetails> query = pxProductInfo_DbOrderDetailsListQuery.forCurrentThread();
        query.setParameter(0, pxProductInfoId);
        return query.list();
    }

    /** Internal query to resolve the "dbDetailsInCombo" to-many relationship of PxOrderDetails. */
    public List<PxOrderDetails> _queryPxOrderDetails_DbDetailsInCombo(Long pxComboDetailsId) {
        synchronized (this) {
            if (pxOrderDetails_DbDetailsInComboQuery == null) {
                QueryBuilder<PxOrderDetails> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PxComboDetailsId.eq(null));
                pxOrderDetails_DbDetailsInComboQuery = queryBuilder.build();
            }
        }
        Query<PxOrderDetails> query = pxOrderDetails_DbDetailsInComboQuery.forCurrentThread();
        query.setParameter(0, pxComboDetailsId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxOrderInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxProductInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPxOrderDetailsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPxFormatInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPxMethodInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T5", daoSession.getPxOptReasonDao().getAllColumns());
            builder.append(" FROM OrderDetails T");
            builder.append(" LEFT JOIN OrderInfo T0 ON T.\"PX_ORDER_INFO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN ProductInfo T1 ON T.\"PX_PRODUCT_INFO_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN OrderDetails T2 ON T.\"PX_COMBO_DETAILS_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN FormatInfo T3 ON T.\"PX_FORMAT_INFO_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN MethodInfo T4 ON T.\"PX_METHOD_INFO_ID\"=T4.\"_id\"");
            builder.append(" LEFT JOIN OptReason T5 ON T.\"PX_OPT_REASON_ID\"=T5.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxOrderDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        PxOrderDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxOrderInfo dbOrder = loadCurrentOther(daoSession.getPxOrderInfoDao(), cursor, offset);
        entity.setDbOrder(dbOrder);
        offset += daoSession.getPxOrderInfoDao().getAllColumns().length;

        PxProductInfo dbProduct = loadCurrentOther(daoSession.getPxProductInfoDao(), cursor, offset);
        entity.setDbProduct(dbProduct);
        offset += daoSession.getPxProductInfoDao().getAllColumns().length;

        PxOrderDetails dbComboDetails = loadCurrentOther(daoSession.getPxOrderDetailsDao(), cursor, offset);
        entity.setDbComboDetails(dbComboDetails);
        offset += daoSession.getPxOrderDetailsDao().getAllColumns().length;

        PxFormatInfo dbFormatInfo = loadCurrentOther(daoSession.getPxFormatInfoDao(), cursor, offset);
        entity.setDbFormatInfo(dbFormatInfo);
        offset += daoSession.getPxFormatInfoDao().getAllColumns().length;

        PxMethodInfo dbMethodInfo = loadCurrentOther(daoSession.getPxMethodInfoDao(), cursor, offset);
        entity.setDbMethodInfo(dbMethodInfo);
        offset += daoSession.getPxMethodInfoDao().getAllColumns().length;

        PxOptReason dbReason = loadCurrentOther(daoSession.getPxOptReasonDao(), cursor, offset);
        entity.setDbReason(dbReason);

        return entity;    
    }

    public PxOrderDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxOrderDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxOrderDetails> list = new ArrayList<PxOrderDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxOrderDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxOrderDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
