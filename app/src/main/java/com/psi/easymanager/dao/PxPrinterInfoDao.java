package com.psi.easymanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxPrinterInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PrinterInfo".
*/
public class PxPrinterInfoDao extends AbstractDao<PxPrinterInfo, Long> {

    public static final String TABLENAME = "PrinterInfo";

    /**
     * Properties of entity PxPrinterInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property IpAddress = new Property(3, String.class, "ipAddress", false, "IP_ADDRESS");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Remarks = new Property(7, String.class, "remarks", false, "REMARKS");
        public final static Property Format = new Property(8, String.class, "format", false, "FORMAT");
        public final static Property IsConnected = new Property(9, String.class, "isConnected", false, "IS_CONNECTED");
        public final static Property DelFlag = new Property(10, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property CashBox = new Property(11, String.class, "cashBox", false, "CASH_BOX");
        public final static Property Sound = new Property(12, String.class, "sound", false, "SOUND");
    };


    public PxPrinterInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxPrinterInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PrinterInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"CODE\" TEXT," + // 2: code
                "\"IP_ADDRESS\" TEXT," + // 3: ipAddress
                "\"TYPE\" TEXT," + // 4: type
                "\"STATUS\" TEXT," + // 5: status
                "\"NAME\" TEXT," + // 6: name
                "\"REMARKS\" TEXT," + // 7: remarks
                "\"FORMAT\" TEXT," + // 8: format
                "\"IS_CONNECTED\" TEXT," + // 9: isConnected
                "\"DEL_FLAG\" TEXT," + // 10: delFlag
                "\"CASH_BOX\" TEXT," + // 11: cashBox
                "\"SOUND\" TEXT);"); // 12: sound
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PrinterInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxPrinterInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(4, ipAddress);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(8, remarks);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(9, format);
        }
 
        String isConnected = entity.getIsConnected();
        if (isConnected != null) {
            stmt.bindString(10, isConnected);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(11, delFlag);
        }
 
        String cashBox = entity.getCashBox();
        if (cashBox != null) {
            stmt.bindString(12, cashBox);
        }
 
        String sound = entity.getSound();
        if (sound != null) {
            stmt.bindString(13, sound);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxPrinterInfo readEntity(Cursor cursor, int offset) {
        PxPrinterInfo entity = new PxPrinterInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ipAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remarks
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // format
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isConnected
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // delFlag
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // cashBox
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // sound
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxPrinterInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIpAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemarks(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFormat(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsConnected(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDelFlag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCashBox(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSound(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxPrinterInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxPrinterInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
