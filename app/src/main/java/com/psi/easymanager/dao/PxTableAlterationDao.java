package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxOrderInfo;
import com.psi.easymanager.module.PxTableInfo;

import com.psi.easymanager.module.PxTableAlteration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TableAlteration".
*/
public class PxTableAlterationDao extends AbstractDao<PxTableAlteration, Long> {

    public static final String TABLENAME = "TableAlteration";

    /**
     * Properties of entity PxTableAlteration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OperateTime = new Property(1, java.util.Date.class, "operateTime", false, "OPERATE_TIME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property IsPrinted = new Property(3, Boolean.class, "isPrinted", false, "IS_PRINTED");
        public final static Property IsClear = new Property(4, Boolean.class, "isClear", false, "IS_CLEAR");
        public final static Property PxOrderInfoId = new Property(5, Long.class, "pxOrderInfoId", false, "PX_ORDER_INFO_ID");
        public final static Property PxOriginalTableId = new Property(6, Long.class, "pxOriginalTableId", false, "PX_ORIGINAL_TABLE_ID");
        public final static Property PxTargetTableId = new Property(7, Long.class, "pxTargetTableId", false, "PX_TARGET_TABLE_ID");
    };

    private DaoSession daoSession;


    public PxTableAlterationDao(DaoConfig config) {
        super(config);
    }
    
    public PxTableAlterationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TableAlteration\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OPERATE_TIME\" INTEGER," + // 1: operateTime
                "\"TYPE\" TEXT," + // 2: type
                "\"IS_PRINTED\" INTEGER," + // 3: isPrinted
                "\"IS_CLEAR\" INTEGER," + // 4: isClear
                "\"PX_ORDER_INFO_ID\" INTEGER," + // 5: pxOrderInfoId
                "\"PX_ORIGINAL_TABLE_ID\" INTEGER," + // 6: pxOriginalTableId
                "\"PX_TARGET_TABLE_ID\" INTEGER);"); // 7: pxTargetTableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TableAlteration\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxTableAlteration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date operateTime = entity.getOperateTime();
        if (operateTime != null) {
            stmt.bindLong(2, operateTime.getTime());
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Boolean isPrinted = entity.getIsPrinted();
        if (isPrinted != null) {
            stmt.bindLong(4, isPrinted ? 1L: 0L);
        }
 
        Boolean isClear = entity.getIsClear();
        if (isClear != null) {
            stmt.bindLong(5, isClear ? 1L: 0L);
        }
 
        Long pxOrderInfoId = entity.getPxOrderInfoId();
        if (pxOrderInfoId != null) {
            stmt.bindLong(6, pxOrderInfoId);
        }
 
        Long pxOriginalTableId = entity.getPxOriginalTableId();
        if (pxOriginalTableId != null) {
            stmt.bindLong(7, pxOriginalTableId);
        }
 
        Long pxTargetTableId = entity.getPxTargetTableId();
        if (pxTargetTableId != null) {
            stmt.bindLong(8, pxTargetTableId);
        }
    }

    @Override
    protected void attachEntity(PxTableAlteration entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxTableAlteration readEntity(Cursor cursor, int offset) {
        PxTableAlteration entity = new PxTableAlteration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // operateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isPrinted
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isClear
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // pxOrderInfoId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // pxOriginalTableId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // pxTargetTableId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxTableAlteration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperateTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsPrinted(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsClear(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setPxOrderInfoId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPxOriginalTableId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setPxTargetTableId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxTableAlteration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxTableAlteration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxOrderInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxTableInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPxTableInfoDao().getAllColumns());
            builder.append(" FROM TableAlteration T");
            builder.append(" LEFT JOIN OrderInfo T0 ON T.\"PX_ORDER_INFO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN TableInfo T1 ON T.\"PX_ORIGINAL_TABLE_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN TableInfo T2 ON T.\"PX_TARGET_TABLE_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxTableAlteration loadCurrentDeep(Cursor cursor, boolean lock) {
        PxTableAlteration entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxOrderInfo dbOrder = loadCurrentOther(daoSession.getPxOrderInfoDao(), cursor, offset);
        entity.setDbOrder(dbOrder);
        offset += daoSession.getPxOrderInfoDao().getAllColumns().length;

        PxTableInfo dbOriginalTable = loadCurrentOther(daoSession.getPxTableInfoDao(), cursor, offset);
        entity.setDbOriginalTable(dbOriginalTable);
        offset += daoSession.getPxTableInfoDao().getAllColumns().length;

        PxTableInfo dbTargetTable = loadCurrentOther(daoSession.getPxTableInfoDao(), cursor, offset);
        entity.setDbTargetTable(dbTargetTable);

        return entity;    
    }

    public PxTableAlteration loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxTableAlteration> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxTableAlteration> list = new ArrayList<PxTableAlteration>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxTableAlteration> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxTableAlteration> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
