package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.User;

import com.psi.easymanager.module.Office;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Office".
*/
public class OfficeDao extends AbstractDao<Office, Long> {

    public static final String TABLENAME = "Office";

    /**
     * Properties of entity Office.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Grade = new Property(4, String.class, "grade", false, "GRADE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property ZipCode = new Property(6, String.class, "zipCode", false, "ZIP_CODE");
        public final static Property Master = new Property(7, String.class, "master", false, "MASTER");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Fax = new Property(9, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Useable = new Property(11, String.class, "useable", false, "USEABLE");
        public final static Property Logo = new Property(12, String.class, "logo", false, "LOGO");
        public final static Property GroupId = new Property(13, String.class, "groupId", false, "GROUP_ID");
        public final static Property Name = new Property(14, String.class, "name", false, "NAME");
        public final static Property InitPassword = new Property(15, String.class, "initPassword", false, "INIT_PASSWORD");
        public final static Property ParentIds = new Property(16, String.class, "parentIds", false, "PARENT_IDS");
        public final static Property ParentId = new Property(17, String.class, "parentId", false, "PARENT_ID");
        public final static Property PrimaryPersonId = new Property(18, long.class, "primaryPersonId", false, "PRIMARY_PERSON_ID");
        public final static Property DeputyPersonId = new Property(19, long.class, "deputyPersonId", false, "DEPUTY_PERSON_ID");
    };

    private DaoSession daoSession;


    public OfficeDao(DaoConfig config) {
        super(config);
    }
    
    public OfficeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Office\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"CODE\" TEXT," + // 2: code
                "\"TYPE\" TEXT," + // 3: type
                "\"GRADE\" TEXT," + // 4: grade
                "\"ADDRESS\" TEXT," + // 5: address
                "\"ZIP_CODE\" TEXT," + // 6: zipCode
                "\"MASTER\" TEXT," + // 7: master
                "\"PHONE\" TEXT," + // 8: phone
                "\"FAX\" TEXT," + // 9: fax
                "\"EMAIL\" TEXT," + // 10: email
                "\"USEABLE\" TEXT," + // 11: useable
                "\"LOGO\" TEXT," + // 12: logo
                "\"GROUP_ID\" TEXT," + // 13: groupId
                "\"NAME\" TEXT," + // 14: name
                "\"INIT_PASSWORD\" TEXT," + // 15: initPassword
                "\"PARENT_IDS\" TEXT," + // 16: parentIds
                "\"PARENT_ID\" TEXT," + // 17: parentId
                "\"PRIMARY_PERSON_ID\" INTEGER NOT NULL ," + // 18: primaryPersonId
                "\"DEPUTY_PERSON_ID\" INTEGER NOT NULL );"); // 19: deputyPersonId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Office\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Office entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(5, grade);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String zipCode = entity.getZipCode();
        if (zipCode != null) {
            stmt.bindString(7, zipCode);
        }
 
        String master = entity.getMaster();
        if (master != null) {
            stmt.bindString(8, master);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(10, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }
 
        String useable = entity.getUseable();
        if (useable != null) {
            stmt.bindString(12, useable);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(13, logo);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(14, groupId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(15, name);
        }
 
        String initPassword = entity.getInitPassword();
        if (initPassword != null) {
            stmt.bindString(16, initPassword);
        }
 
        String parentIds = entity.getParentIds();
        if (parentIds != null) {
            stmt.bindString(17, parentIds);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(18, parentId);
        }
        stmt.bindLong(19, entity.getPrimaryPersonId());
        stmt.bindLong(20, entity.getDeputyPersonId());
    }

    @Override
    protected void attachEntity(Office entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Office readEntity(Cursor cursor, int offset) {
        Office entity = new Office( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // grade
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // zipCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // master
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fax
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // useable
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // logo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // groupId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // initPassword
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // parentIds
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // parentId
            cursor.getLong(offset + 18), // primaryPersonId
            cursor.getLong(offset + 19) // deputyPersonId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Office entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGrade(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setZipCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMaster(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFax(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUseable(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLogo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroupId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInitPassword(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setParentIds(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setParentId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPrimaryPersonId(cursor.getLong(offset + 18));
        entity.setDeputyPersonId(cursor.getLong(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Office entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Office entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM Office T");
            builder.append(" LEFT JOIN User T0 ON T.\"PRIMARY_PERSON_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN User T1 ON T.\"DEPUTY_PERSON_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Office loadCurrentDeep(Cursor cursor, boolean lock) {
        Office entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User primaryPerson = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(primaryPerson != null) {
            entity.setPrimaryPerson(primaryPerson);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        User deputyPerson = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(deputyPerson != null) {
            entity.setDeputyPerson(deputyPerson);
        }

        return entity;    
    }

    public Office loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Office> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Office> list = new ArrayList<Office>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Office> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Office> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
