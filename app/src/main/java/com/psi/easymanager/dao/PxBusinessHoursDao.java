package com.psi.easymanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxBusinessHours;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BusinessHours".
*/
public class PxBusinessHoursDao extends AbstractDao<PxBusinessHours, Long> {

    public static final String TABLENAME = "BusinessHours";

    /**
     * Properties of entity PxBusinessHours.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property BusinessType = new Property(2, String.class, "businessType", false, "BUSINESS_TYPE");
        public final static Property CloseTime = new Property(3, String.class, "closeTime", false, "CLOSE_TIME");
        public final static Property DelFlag = new Property(4, String.class, "delFlag", false, "DEL_FLAG");
    };


    public PxBusinessHoursDao(DaoConfig config) {
        super(config);
    }
    
    public PxBusinessHoursDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BusinessHours\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"BUSINESS_TYPE\" TEXT," + // 2: businessType
                "\"CLOSE_TIME\" TEXT," + // 3: closeTime
                "\"DEL_FLAG\" TEXT);"); // 4: delFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BusinessHours\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxBusinessHours entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String businessType = entity.getBusinessType();
        if (businessType != null) {
            stmt.bindString(3, businessType);
        }
 
        String closeTime = entity.getCloseTime();
        if (closeTime != null) {
            stmt.bindString(4, closeTime);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(5, delFlag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxBusinessHours readEntity(Cursor cursor, int offset) {
        PxBusinessHours entity = new PxBusinessHours( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // businessType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // closeTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // delFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxBusinessHours entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBusinessType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCloseTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDelFlag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxBusinessHours entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxBusinessHours entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
