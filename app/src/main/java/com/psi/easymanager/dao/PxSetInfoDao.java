package com.psi.easymanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxSetInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PxSetInfo".
*/
public class PxSetInfoDao extends AbstractDao<PxSetInfo, Long> {

    public static final String TABLENAME = "PxSetInfo";

    /**
     * Properties of entity PxSetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property DelFlag = new Property(2, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property Model = new Property(3, String.class, "model", false, "MODEL");
        public final static Property IsFastOpenOrder = new Property(4, String.class, "isFastOpenOrder", false, "IS_FAST_OPEN_ORDER");
        public final static Property IsAutoTurnCheckout = new Property(5, String.class, "isAutoTurnCheckout", false, "IS_AUTO_TURN_CHECKOUT");
        public final static Property AutoOrder = new Property(6, String.class, "autoOrder", false, "AUTO_ORDER");
        public final static Property OverAutoStartBill = new Property(7, String.class, "overAutoStartBill", false, "OVER_AUTO_START_BILL");
        public final static Property IsAutoPrintRechargeVoucher = new Property(8, String.class, "isAutoPrintRechargeVoucher", false, "IS_AUTO_PRINT_RECHARGE_VOUCHER");
        public final static Property IsFinancePrintCategory = new Property(9, String.class, "isFinancePrintCategory", false, "IS_FINANCE_PRINT_CATEGORY");
    };


    public PxSetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxSetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PxSetInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"DEL_FLAG\" TEXT," + // 2: delFlag
                "\"MODEL\" TEXT," + // 3: model
                "\"IS_FAST_OPEN_ORDER\" TEXT," + // 4: isFastOpenOrder
                "\"IS_AUTO_TURN_CHECKOUT\" TEXT," + // 5: isAutoTurnCheckout
                "\"AUTO_ORDER\" TEXT," + // 6: autoOrder
                "\"OVER_AUTO_START_BILL\" TEXT," + // 7: overAutoStartBill
                "\"IS_AUTO_PRINT_RECHARGE_VOUCHER\" TEXT," + // 8: isAutoPrintRechargeVoucher
                "\"IS_FINANCE_PRINT_CATEGORY\" TEXT);"); // 9: isFinancePrintCategory
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PxSetInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxSetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(3, delFlag);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(4, model);
        }
 
        String isFastOpenOrder = entity.getIsFastOpenOrder();
        if (isFastOpenOrder != null) {
            stmt.bindString(5, isFastOpenOrder);
        }
 
        String isAutoTurnCheckout = entity.getIsAutoTurnCheckout();
        if (isAutoTurnCheckout != null) {
            stmt.bindString(6, isAutoTurnCheckout);
        }
 
        String autoOrder = entity.getAutoOrder();
        if (autoOrder != null) {
            stmt.bindString(7, autoOrder);
        }
 
        String overAutoStartBill = entity.getOverAutoStartBill();
        if (overAutoStartBill != null) {
            stmt.bindString(8, overAutoStartBill);
        }
 
        String isAutoPrintRechargeVoucher = entity.getIsAutoPrintRechargeVoucher();
        if (isAutoPrintRechargeVoucher != null) {
            stmt.bindString(9, isAutoPrintRechargeVoucher);
        }
 
        String isFinancePrintCategory = entity.getIsFinancePrintCategory();
        if (isFinancePrintCategory != null) {
            stmt.bindString(10, isFinancePrintCategory);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxSetInfo readEntity(Cursor cursor, int offset) {
        PxSetInfo entity = new PxSetInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // delFlag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // model
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // isFastOpenOrder
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isAutoTurnCheckout
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // autoOrder
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // overAutoStartBill
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isAutoPrintRechargeVoucher
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // isFinancePrintCategory
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxSetInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDelFlag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsFastOpenOrder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsAutoTurnCheckout(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAutoOrder(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOverAutoStartBill(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsAutoPrintRechargeVoucher(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsFinancePrintCategory(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxSetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxSetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
