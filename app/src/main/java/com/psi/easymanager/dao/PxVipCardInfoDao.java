package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxVipCardType;

import com.psi.easymanager.module.PxVipCardInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VipCardInfo".
*/
public class PxVipCardInfoDao extends AbstractDao<PxVipCardInfo, Long> {

    public static final String TABLENAME = "VipCardInfo";

    /**
     * Properties of entity PxVipCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property IdcardNum = new Property(2, String.class, "idcardNum", false, "IDCARD_NUM");
        public final static Property CardNum = new Property(3, String.class, "cardNum", false, "CARD_NUM");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property RechargeMoney = new Property(6, Double.class, "rechargeMoney", false, "RECHARGE_MONEY");
        public final static Property ReceivedMoney = new Property(7, Double.class, "receivedMoney", false, "RECEIVED_MONEY");
        public final static Property AccountBalance = new Property(8, Double.class, "accountBalance", false, "ACCOUNT_BALANCE");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property Score = new Property(10, Integer.class, "score", false, "SCORE");
        public final static Property Pid = new Property(11, String.class, "pid", false, "PID");
        public final static Property DelFlag = new Property(12, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property PxVipCardTypeId = new Property(13, Long.class, "pxVipCardTypeId", false, "PX_VIP_CARD_TYPE_ID");
    };

    private DaoSession daoSession;


    public PxVipCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxVipCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VipCardInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"IDCARD_NUM\" TEXT," + // 2: idcardNum
                "\"CARD_NUM\" TEXT," + // 3: cardNum
                "\"PASSWORD\" TEXT," + // 4: password
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"RECHARGE_MONEY\" REAL," + // 6: rechargeMoney
                "\"RECEIVED_MONEY\" REAL," + // 7: receivedMoney
                "\"ACCOUNT_BALANCE\" REAL," + // 8: accountBalance
                "\"STATUS\" TEXT," + // 9: status
                "\"SCORE\" INTEGER," + // 10: score
                "\"PID\" TEXT," + // 11: pid
                "\"DEL_FLAG\" TEXT," + // 12: delFlag
                "\"PX_VIP_CARD_TYPE_ID\" INTEGER);"); // 13: pxVipCardTypeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VipCardInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxVipCardInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String idcardNum = entity.getIdcardNum();
        if (idcardNum != null) {
            stmt.bindString(3, idcardNum);
        }
 
        String cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindString(4, cardNum);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        Double rechargeMoney = entity.getRechargeMoney();
        if (rechargeMoney != null) {
            stmt.bindDouble(7, rechargeMoney);
        }
 
        Double receivedMoney = entity.getReceivedMoney();
        if (receivedMoney != null) {
            stmt.bindDouble(8, receivedMoney);
        }
 
        Double accountBalance = entity.getAccountBalance();
        if (accountBalance != null) {
            stmt.bindDouble(9, accountBalance);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(11, score);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(12, pid);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(13, delFlag);
        }
 
        Long pxVipCardTypeId = entity.getPxVipCardTypeId();
        if (pxVipCardTypeId != null) {
            stmt.bindLong(14, pxVipCardTypeId);
        }
    }

    @Override
    protected void attachEntity(PxVipCardInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxVipCardInfo readEntity(Cursor cursor, int offset) {
        PxVipCardInfo entity = new PxVipCardInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // idcardNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cardNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // rechargeMoney
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // receivedMoney
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // accountBalance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // score
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // pid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // delFlag
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // pxVipCardTypeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxVipCardInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIdcardNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRechargeMoney(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setReceivedMoney(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAccountBalance(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setScore(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDelFlag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPxVipCardTypeId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxVipCardInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxVipCardInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxVipCardTypeDao().getAllColumns());
            builder.append(" FROM VipCardInfo T");
            builder.append(" LEFT JOIN VipCardType T0 ON T.\"PX_VIP_CARD_TYPE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxVipCardInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        PxVipCardInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxVipCardType dbVipCardType = loadCurrentOther(daoSession.getPxVipCardTypeDao(), cursor, offset);
        entity.setDbVipCardType(dbVipCardType);

        return entity;    
    }

    public PxVipCardInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxVipCardInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxVipCardInfo> list = new ArrayList<PxVipCardInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxVipCardInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxVipCardInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
