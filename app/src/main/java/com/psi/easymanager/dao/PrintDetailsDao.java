package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxFormatInfo;
import com.psi.easymanager.module.PxMethodInfo;
import com.psi.easymanager.module.PxOptReason;
import com.psi.easymanager.module.PxOrderInfo;
import com.psi.easymanager.module.PxProductInfo;

import com.psi.easymanager.module.PrintDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PrintDetails".
*/
public class PrintDetailsDao extends AbstractDao<PrintDetails, Long> {

    public static final String TABLENAME = "PrintDetails";

    /**
     * Properties of entity PrintDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property OrderStatus = new Property(2, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property Num = new Property(3, Double.class, "num", false, "NUM");
        public final static Property MultipleUnitNumber = new Property(4, Double.class, "multipleUnitNumber", false, "MULTIPLE_UNIT_NUMBER");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property InCombo = new Property(6, String.class, "inCombo", false, "IN_COMBO");
        public final static Property PxProductInfoId = new Property(7, Long.class, "pxProductInfoId", false, "PX_PRODUCT_INFO_ID");
        public final static Property PxOrderInfoId = new Property(8, Long.class, "pxOrderInfoId", false, "PX_ORDER_INFO_ID");
        public final static Property PxOptReasonId = new Property(9, Long.class, "pxOptReasonId", false, "PX_OPT_REASON_ID");
        public final static Property PxFormatInfoId = new Property(10, Long.class, "pxFormatInfoId", false, "PX_FORMAT_INFO_ID");
        public final static Property PxMethodInfoId = new Property(11, Long.class, "pxMethodInfoId", false, "PX_METHOD_INFO_ID");
        public final static Property FormatName = new Property(12, String.class, "formatName", false, "FORMAT_NAME");
        public final static Property MethodName = new Property(13, String.class, "methodName", false, "METHOD_NAME");
        public final static Property ReasonName = new Property(14, String.class, "reasonName", false, "REASON_NAME");
    };

    private DaoSession daoSession;


    public PrintDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public PrintDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PrintDetails\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"ORDER_STATUS\" TEXT," + // 2: orderStatus
                "\"NUM\" REAL," + // 3: num
                "\"MULTIPLE_UNIT_NUMBER\" REAL," + // 4: multipleUnitNumber
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"IN_COMBO\" TEXT," + // 6: inCombo
                "\"PX_PRODUCT_INFO_ID\" INTEGER," + // 7: pxProductInfoId
                "\"PX_ORDER_INFO_ID\" INTEGER," + // 8: pxOrderInfoId
                "\"PX_OPT_REASON_ID\" INTEGER," + // 9: pxOptReasonId
                "\"PX_FORMAT_INFO_ID\" INTEGER," + // 10: pxFormatInfoId
                "\"PX_METHOD_INFO_ID\" INTEGER," + // 11: pxMethodInfoId
                "\"FORMAT_NAME\" TEXT," + // 12: formatName
                "\"METHOD_NAME\" TEXT," + // 13: methodName
                "\"REASON_NAME\" TEXT);"); // 14: reasonName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PrintDetails\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrintDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(3, orderStatus);
        }
 
        Double num = entity.getNum();
        if (num != null) {
            stmt.bindDouble(4, num);
        }
 
        Double multipleUnitNumber = entity.getMultipleUnitNumber();
        if (multipleUnitNumber != null) {
            stmt.bindDouble(5, multipleUnitNumber);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String inCombo = entity.getInCombo();
        if (inCombo != null) {
            stmt.bindString(7, inCombo);
        }
 
        Long pxProductInfoId = entity.getPxProductInfoId();
        if (pxProductInfoId != null) {
            stmt.bindLong(8, pxProductInfoId);
        }
 
        Long pxOrderInfoId = entity.getPxOrderInfoId();
        if (pxOrderInfoId != null) {
            stmt.bindLong(9, pxOrderInfoId);
        }
 
        Long pxOptReasonId = entity.getPxOptReasonId();
        if (pxOptReasonId != null) {
            stmt.bindLong(10, pxOptReasonId);
        }
 
        Long pxFormatInfoId = entity.getPxFormatInfoId();
        if (pxFormatInfoId != null) {
            stmt.bindLong(11, pxFormatInfoId);
        }
 
        Long pxMethodInfoId = entity.getPxMethodInfoId();
        if (pxMethodInfoId != null) {
            stmt.bindLong(12, pxMethodInfoId);
        }
 
        String formatName = entity.getFormatName();
        if (formatName != null) {
            stmt.bindString(13, formatName);
        }
 
        String methodName = entity.getMethodName();
        if (methodName != null) {
            stmt.bindString(14, methodName);
        }
 
        String reasonName = entity.getReasonName();
        if (reasonName != null) {
            stmt.bindString(15, reasonName);
        }
    }

    @Override
    protected void attachEntity(PrintDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrintDetails readEntity(Cursor cursor, int offset) {
        PrintDetails entity = new PrintDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderStatus
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // multipleUnitNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inCombo
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // pxProductInfoId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // pxOrderInfoId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // pxOptReasonId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // pxFormatInfoId
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // pxMethodInfoId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // formatName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // methodName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // reasonName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrintDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setMultipleUnitNumber(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInCombo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPxProductInfoId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPxOrderInfoId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setPxOptReasonId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setPxFormatInfoId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setPxMethodInfoId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setFormatName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMethodName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReasonName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrintDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrintDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxProductInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxOrderInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPxOptReasonDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getPxFormatInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getPxMethodInfoDao().getAllColumns());
            builder.append(" FROM PrintDetails T");
            builder.append(" LEFT JOIN ProductInfo T0 ON T.\"PX_PRODUCT_INFO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN OrderInfo T1 ON T.\"PX_ORDER_INFO_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN OptReason T2 ON T.\"PX_OPT_REASON_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN FormatInfo T3 ON T.\"PX_FORMAT_INFO_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN MethodInfo T4 ON T.\"PX_METHOD_INFO_ID\"=T4.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PrintDetails loadCurrentDeep(Cursor cursor, boolean lock) {
        PrintDetails entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxProductInfo dbProduct = loadCurrentOther(daoSession.getPxProductInfoDao(), cursor, offset);
        entity.setDbProduct(dbProduct);
        offset += daoSession.getPxProductInfoDao().getAllColumns().length;

        PxOrderInfo dbOrder = loadCurrentOther(daoSession.getPxOrderInfoDao(), cursor, offset);
        entity.setDbOrder(dbOrder);
        offset += daoSession.getPxOrderInfoDao().getAllColumns().length;

        PxOptReason dbReason = loadCurrentOther(daoSession.getPxOptReasonDao(), cursor, offset);
        entity.setDbReason(dbReason);
        offset += daoSession.getPxOptReasonDao().getAllColumns().length;

        PxFormatInfo dbFormatInfo = loadCurrentOther(daoSession.getPxFormatInfoDao(), cursor, offset);
        entity.setDbFormatInfo(dbFormatInfo);
        offset += daoSession.getPxFormatInfoDao().getAllColumns().length;

        PxMethodInfo dbMethodInfo = loadCurrentOther(daoSession.getPxMethodInfoDao(), cursor, offset);
        entity.setDbMethodInfo(dbMethodInfo);

        return entity;    
    }

    public PrintDetails loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PrintDetails> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PrintDetails> list = new ArrayList<PrintDetails>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PrintDetails> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PrintDetails> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
