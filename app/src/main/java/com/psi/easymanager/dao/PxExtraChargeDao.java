package com.psi.easymanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxExtraCharge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ExtraCharge".
*/
public class PxExtraChargeDao extends AbstractDao<PxExtraCharge, Long> {

    public static final String TABLENAME = "ExtraCharge";

    /**
     * Properties of entity PxExtraCharge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ServiceCharge = new Property(3, Double.class, "serviceCharge", false, "SERVICE_CHARGE");
        public final static Property ServiceType = new Property(4, String.class, "serviceType", false, "SERVICE_TYPE");
        public final static Property MinConsume = new Property(5, Double.class, "minConsume", false, "MIN_CONSUME");
        public final static Property ServiceStatus = new Property(6, String.class, "serviceStatus", false, "SERVICE_STATUS");
        public final static Property ConsumeStatus = new Property(7, String.class, "consumeStatus", false, "CONSUME_STATUS");
        public final static Property Minutes = new Property(8, Integer.class, "minutes", false, "MINUTES");
        public final static Property DelFlag = new Property(9, String.class, "delFlag", false, "DEL_FLAG");
    };


    public PxExtraChargeDao(DaoConfig config) {
        super(config);
    }
    
    public PxExtraChargeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ExtraCharge\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"NAME\" TEXT," + // 2: name
                "\"SERVICE_CHARGE\" REAL," + // 3: serviceCharge
                "\"SERVICE_TYPE\" TEXT," + // 4: serviceType
                "\"MIN_CONSUME\" REAL," + // 5: minConsume
                "\"SERVICE_STATUS\" TEXT," + // 6: serviceStatus
                "\"CONSUME_STATUS\" TEXT," + // 7: consumeStatus
                "\"MINUTES\" INTEGER," + // 8: minutes
                "\"DEL_FLAG\" TEXT);"); // 9: delFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ExtraCharge\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxExtraCharge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Double serviceCharge = entity.getServiceCharge();
        if (serviceCharge != null) {
            stmt.bindDouble(4, serviceCharge);
        }
 
        String serviceType = entity.getServiceType();
        if (serviceType != null) {
            stmt.bindString(5, serviceType);
        }
 
        Double minConsume = entity.getMinConsume();
        if (minConsume != null) {
            stmt.bindDouble(6, minConsume);
        }
 
        String serviceStatus = entity.getServiceStatus();
        if (serviceStatus != null) {
            stmt.bindString(7, serviceStatus);
        }
 
        String consumeStatus = entity.getConsumeStatus();
        if (consumeStatus != null) {
            stmt.bindString(8, consumeStatus);
        }
 
        Integer minutes = entity.getMinutes();
        if (minutes != null) {
            stmt.bindLong(9, minutes);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(10, delFlag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxExtraCharge readEntity(Cursor cursor, int offset) {
        PxExtraCharge entity = new PxExtraCharge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // serviceCharge
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // serviceType
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // minConsume
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serviceStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // consumeStatus
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // minutes
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // delFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxExtraCharge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServiceCharge(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setServiceType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMinConsume(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setServiceStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setConsumeStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMinutes(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDelFlag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxExtraCharge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxExtraCharge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
