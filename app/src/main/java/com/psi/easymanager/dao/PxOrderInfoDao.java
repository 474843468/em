package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxExtraDetails;
import com.psi.easymanager.module.PxPromotioInfo;
import com.psi.easymanager.module.User;

import com.psi.easymanager.module.PxOrderInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OrderInfo".
*/
public class PxOrderInfoDao extends AbstractDao<PxOrderInfo, Long> {

    public static final String TABLENAME = "OrderInfo";

    /**
     * Properties of entity PxOrderInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ObjectId = new Property(1, String.class, "objectId", false, "OBJECT_ID");
        public final static Property TotalPrice = new Property(2, Double.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property AccountReceivable = new Property(3, Double.class, "accountReceivable", false, "ACCOUNT_RECEIVABLE");
        public final static Property RealPrice = new Property(4, Double.class, "realPrice", false, "REAL_PRICE");
        public final static Property TotalChange = new Property(5, Double.class, "totalChange", false, "TOTAL_CHANGE");
        public final static Property DiscountPrice = new Property(6, Double.class, "discountPrice", false, "DISCOUNT_PRICE");
        public final static Property PayType = new Property(7, String.class, "payType", false, "PAY_TYPE");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property Tail = new Property(9, String.class, "tail", false, "TAIL");
        public final static Property TailMoney = new Property(10, Double.class, "tailMoney", false, "TAIL_MONEY");
        public final static Property UseVipCard = new Property(11, String.class, "useVipCard", false, "USE_VIP_CARD");
        public final static Property ActualPeopleNumber = new Property(12, Integer.class, "actualPeopleNumber", false, "ACTUAL_PEOPLE_NUMBER");
        public final static Property StartTime = new Property(13, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(14, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property OfficeName = new Property(15, String.class, "officeName", false, "OFFICE_NAME");
        public final static Property OrderInfoType = new Property(16, String.class, "orderInfoType", false, "ORDER_INFO_TYPE");
        public final static Property ExtraType = new Property(17, String.class, "extraType", false, "EXTRA_TYPE");
        public final static Property LastMoveTableTime = new Property(18, java.util.Date.class, "lastMoveTableTime", false, "LAST_MOVE_TABLE_TIME");
        public final static Property OrderNo = new Property(19, String.class, "orderNo", false, "ORDER_NO");
        public final static Property OrderReqNo = new Property(20, String.class, "orderReqNo", false, "ORDER_REQ_NO");
        public final static Property IsUpload = new Property(21, Boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property ExtraMoney = new Property(22, Double.class, "extraMoney", false, "EXTRA_MONEY");
        public final static Property ComplementMoney = new Property(23, Double.class, "complementMoney", false, "COMPLEMENT_MONEY");
        public final static Property ShiftChangeType = new Property(24, String.class, "shiftChangeType", false, "SHIFT_CHANGE_TYPE");
        public final static Property FinalArea = new Property(25, String.class, "finalArea", false, "FINAL_AREA");
        public final static Property IsLock = new Property(26, Boolean.class, "isLock", false, "IS_LOCK");
        public final static Property Remarks = new Property(27, String.class, "remarks", false, "REMARKS");
        public final static Property VoucherMoney = new Property(28, Double.class, "voucherMoney", false, "VOUCHER_MONEY");
        public final static Property IsReversed = new Property(29, String.class, "isReversed", false, "IS_REVERSED");
        public final static Property IsUploadReverse = new Property(30, Boolean.class, "isUploadReverse", false, "IS_UPLOAD_REVERSE");
        public final static Property IsReserveOrder = new Property(31, String.class, "isReserveOrder", false, "IS_RESERVE_ORDER");
        public final static Property LinkMan = new Property(32, String.class, "linkMan", false, "LINK_MAN");
        public final static Property ContactPhone = new Property(33, String.class, "contactPhone", false, "CONTACT_PHONE");
        public final static Property DiningTime = new Property(34, java.util.Date.class, "diningTime", false, "DINING_TIME");
        public final static Property ReserveState = new Property(35, String.class, "reserveState", false, "RESERVE_STATE");
        public final static Property PayPrivilege = new Property(36, Double.class, "payPrivilege", false, "PAY_PRIVILEGE");
        public final static Property Type = new Property(37, String.class, "type", false, "TYPE");
        public final static Property PxExtraDetailsId = new Property(38, Long.class, "pxExtraDetailsId", false, "PX_EXTRA_DETAILS_ID");
        public final static Property PxPromotioId = new Property(39, Long.class, "pxPromotioId", false, "PX_PROMOTIO_ID");
        public final static Property UserId = new Property(40, long.class, "userId", false, "USER_ID");
        public final static Property WaiterId = new Property(41, long.class, "waiterId", false, "WAITER_ID");
        public final static Property CheckOutUserId = new Property(42, long.class, "checkOutUserId", false, "CHECK_OUT_USER_ID");
    };

    private DaoSession daoSession;


    public PxOrderInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxOrderInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OrderInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"OBJECT_ID\" TEXT," + // 1: objectId
                "\"TOTAL_PRICE\" REAL," + // 2: totalPrice
                "\"ACCOUNT_RECEIVABLE\" REAL," + // 3: accountReceivable
                "\"REAL_PRICE\" REAL," + // 4: realPrice
                "\"TOTAL_CHANGE\" REAL," + // 5: totalChange
                "\"DISCOUNT_PRICE\" REAL," + // 6: discountPrice
                "\"PAY_TYPE\" TEXT," + // 7: payType
                "\"STATUS\" TEXT," + // 8: status
                "\"TAIL\" TEXT," + // 9: tail
                "\"TAIL_MONEY\" REAL," + // 10: tailMoney
                "\"USE_VIP_CARD\" TEXT," + // 11: useVipCard
                "\"ACTUAL_PEOPLE_NUMBER\" INTEGER," + // 12: actualPeopleNumber
                "\"START_TIME\" INTEGER," + // 13: startTime
                "\"END_TIME\" INTEGER," + // 14: endTime
                "\"OFFICE_NAME\" TEXT," + // 15: officeName
                "\"ORDER_INFO_TYPE\" TEXT," + // 16: orderInfoType
                "\"EXTRA_TYPE\" TEXT," + // 17: extraType
                "\"LAST_MOVE_TABLE_TIME\" INTEGER," + // 18: lastMoveTableTime
                "\"ORDER_NO\" TEXT," + // 19: orderNo
                "\"ORDER_REQ_NO\" TEXT," + // 20: orderReqNo
                "\"IS_UPLOAD\" INTEGER," + // 21: isUpload
                "\"EXTRA_MONEY\" REAL," + // 22: extraMoney
                "\"COMPLEMENT_MONEY\" REAL," + // 23: complementMoney
                "\"SHIFT_CHANGE_TYPE\" TEXT," + // 24: shiftChangeType
                "\"FINAL_AREA\" TEXT," + // 25: finalArea
                "\"IS_LOCK\" INTEGER," + // 26: isLock
                "\"REMARKS\" TEXT," + // 27: remarks
                "\"VOUCHER_MONEY\" REAL," + // 28: voucherMoney
                "\"IS_REVERSED\" TEXT," + // 29: isReversed
                "\"IS_UPLOAD_REVERSE\" INTEGER," + // 30: isUploadReverse
                "\"IS_RESERVE_ORDER\" TEXT," + // 31: isReserveOrder
                "\"LINK_MAN\" TEXT," + // 32: linkMan
                "\"CONTACT_PHONE\" TEXT," + // 33: contactPhone
                "\"DINING_TIME\" INTEGER," + // 34: diningTime
                "\"RESERVE_STATE\" TEXT," + // 35: reserveState
                "\"PAY_PRIVILEGE\" REAL," + // 36: payPrivilege
                "\"TYPE\" TEXT," + // 37: type
                "\"PX_EXTRA_DETAILS_ID\" INTEGER," + // 38: pxExtraDetailsId
                "\"PX_PROMOTIO_ID\" INTEGER," + // 39: pxPromotioId
                "\"USER_ID\" INTEGER NOT NULL ," + // 40: userId
                "\"WAITER_ID\" INTEGER NOT NULL ," + // 41: waiterId
                "\"CHECK_OUT_USER_ID\" INTEGER NOT NULL );"); // 42: checkOutUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OrderInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxOrderInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(2, objectId);
        }
 
        Double totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindDouble(3, totalPrice);
        }
 
        Double accountReceivable = entity.getAccountReceivable();
        if (accountReceivable != null) {
            stmt.bindDouble(4, accountReceivable);
        }
 
        Double realPrice = entity.getRealPrice();
        if (realPrice != null) {
            stmt.bindDouble(5, realPrice);
        }
 
        Double totalChange = entity.getTotalChange();
        if (totalChange != null) {
            stmt.bindDouble(6, totalChange);
        }
 
        Double discountPrice = entity.getDiscountPrice();
        if (discountPrice != null) {
            stmt.bindDouble(7, discountPrice);
        }
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(8, payType);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String tail = entity.getTail();
        if (tail != null) {
            stmt.bindString(10, tail);
        }
 
        Double tailMoney = entity.getTailMoney();
        if (tailMoney != null) {
            stmt.bindDouble(11, tailMoney);
        }
 
        String useVipCard = entity.getUseVipCard();
        if (useVipCard != null) {
            stmt.bindString(12, useVipCard);
        }
 
        Integer actualPeopleNumber = entity.getActualPeopleNumber();
        if (actualPeopleNumber != null) {
            stmt.bindLong(13, actualPeopleNumber);
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(14, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(15, endTime.getTime());
        }
 
        String officeName = entity.getOfficeName();
        if (officeName != null) {
            stmt.bindString(16, officeName);
        }
 
        String orderInfoType = entity.getOrderInfoType();
        if (orderInfoType != null) {
            stmt.bindString(17, orderInfoType);
        }
 
        String extraType = entity.getExtraType();
        if (extraType != null) {
            stmt.bindString(18, extraType);
        }
 
        java.util.Date lastMoveTableTime = entity.getLastMoveTableTime();
        if (lastMoveTableTime != null) {
            stmt.bindLong(19, lastMoveTableTime.getTime());
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(20, orderNo);
        }
 
        String orderReqNo = entity.getOrderReqNo();
        if (orderReqNo != null) {
            stmt.bindString(21, orderReqNo);
        }
 
        Boolean isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(22, isUpload ? 1L: 0L);
        }
 
        Double extraMoney = entity.getExtraMoney();
        if (extraMoney != null) {
            stmt.bindDouble(23, extraMoney);
        }
 
        Double complementMoney = entity.getComplementMoney();
        if (complementMoney != null) {
            stmt.bindDouble(24, complementMoney);
        }
 
        String shiftChangeType = entity.getShiftChangeType();
        if (shiftChangeType != null) {
            stmt.bindString(25, shiftChangeType);
        }
 
        String finalArea = entity.getFinalArea();
        if (finalArea != null) {
            stmt.bindString(26, finalArea);
        }
 
        Boolean isLock = entity.getIsLock();
        if (isLock != null) {
            stmt.bindLong(27, isLock ? 1L: 0L);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(28, remarks);
        }
 
        Double voucherMoney = entity.getVoucherMoney();
        if (voucherMoney != null) {
            stmt.bindDouble(29, voucherMoney);
        }
 
        String isReversed = entity.getIsReversed();
        if (isReversed != null) {
            stmt.bindString(30, isReversed);
        }
 
        Boolean isUploadReverse = entity.getIsUploadReverse();
        if (isUploadReverse != null) {
            stmt.bindLong(31, isUploadReverse ? 1L: 0L);
        }
 
        String isReserveOrder = entity.getIsReserveOrder();
        if (isReserveOrder != null) {
            stmt.bindString(32, isReserveOrder);
        }
 
        String linkMan = entity.getLinkMan();
        if (linkMan != null) {
            stmt.bindString(33, linkMan);
        }
 
        String contactPhone = entity.getContactPhone();
        if (contactPhone != null) {
            stmt.bindString(34, contactPhone);
        }
 
        java.util.Date diningTime = entity.getDiningTime();
        if (diningTime != null) {
            stmt.bindLong(35, diningTime.getTime());
        }
 
        String reserveState = entity.getReserveState();
        if (reserveState != null) {
            stmt.bindString(36, reserveState);
        }
 
        Double payPrivilege = entity.getPayPrivilege();
        if (payPrivilege != null) {
            stmt.bindDouble(37, payPrivilege);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(38, type);
        }
 
        Long pxExtraDetailsId = entity.getPxExtraDetailsId();
        if (pxExtraDetailsId != null) {
            stmt.bindLong(39, pxExtraDetailsId);
        }
 
        Long pxPromotioId = entity.getPxPromotioId();
        if (pxPromotioId != null) {
            stmt.bindLong(40, pxPromotioId);
        }
        stmt.bindLong(41, entity.getUserId());
        stmt.bindLong(42, entity.getWaiterId());
        stmt.bindLong(43, entity.getCheckOutUserId());
    }

    @Override
    protected void attachEntity(PxOrderInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxOrderInfo readEntity(Cursor cursor, int offset) {
        PxOrderInfo entity = new PxOrderInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // objectId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // totalPrice
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // accountReceivable
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // realPrice
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // totalChange
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // discountPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // payType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tail
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // tailMoney
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // useVipCard
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // actualPeopleNumber
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // startTime
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // endTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // officeName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // orderInfoType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // extraType
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // lastMoveTableTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // orderNo
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // orderReqNo
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // isUpload
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // extraMoney
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // complementMoney
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // shiftChangeType
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // finalArea
            cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0, // isLock
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // remarks
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // voucherMoney
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // isReversed
            cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0, // isUploadReverse
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // isReserveOrder
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // linkMan
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // contactPhone
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // diningTime
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // reserveState
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // payPrivilege
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // type
            cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38), // pxExtraDetailsId
            cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39), // pxPromotioId
            cursor.getLong(offset + 40), // userId
            cursor.getLong(offset + 41), // waiterId
            cursor.getLong(offset + 42) // checkOutUserId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxOrderInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setAccountReceivable(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setRealPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTotalChange(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setDiscountPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPayType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTailMoney(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setUseVipCard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setActualPeopleNumber(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setStartTime(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setEndTime(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setOfficeName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOrderInfoType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setExtraType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLastMoveTableTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setOrderNo(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOrderReqNo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIsUpload(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setExtraMoney(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setComplementMoney(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setShiftChangeType(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setFinalArea(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsLock(cursor.isNull(offset + 26) ? null : cursor.getShort(offset + 26) != 0);
        entity.setRemarks(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setVoucherMoney(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setIsReversed(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIsUploadReverse(cursor.isNull(offset + 30) ? null : cursor.getShort(offset + 30) != 0);
        entity.setIsReserveOrder(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLinkMan(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setContactPhone(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setDiningTime(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setReserveState(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setPayPrivilege(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setType(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setPxExtraDetailsId(cursor.isNull(offset + 38) ? null : cursor.getLong(offset + 38));
        entity.setPxPromotioId(cursor.isNull(offset + 39) ? null : cursor.getLong(offset + 39));
        entity.setUserId(cursor.getLong(offset + 40));
        entity.setWaiterId(cursor.getLong(offset + 41));
        entity.setCheckOutUserId(cursor.getLong(offset + 42));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxOrderInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxOrderInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxExtraDetailsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxPromotioInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM OrderInfo T");
            builder.append(" LEFT JOIN ExtraDetails T0 ON T.\"PX_EXTRA_DETAILS_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN PromotioInfo T1 ON T.\"PX_PROMOTIO_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN User T2 ON T.\"USER_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN User T3 ON T.\"WAITER_ID\"=T3.\"_id\"");
            builder.append(" LEFT JOIN User T4 ON T.\"CHECK_OUT_USER_ID\"=T4.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxOrderInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        PxOrderInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxExtraDetails dbCurrentExtra = loadCurrentOther(daoSession.getPxExtraDetailsDao(), cursor, offset);
        entity.setDbCurrentExtra(dbCurrentExtra);
        offset += daoSession.getPxExtraDetailsDao().getAllColumns().length;

        PxPromotioInfo dbPromotioInfo = loadCurrentOther(daoSession.getPxPromotioInfoDao(), cursor, offset);
        entity.setDbPromotioInfo(dbPromotioInfo);
        offset += daoSession.getPxPromotioInfoDao().getAllColumns().length;

        User dbUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(dbUser != null) {
            entity.setDbUser(dbUser);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        User dbWaiter = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(dbWaiter != null) {
            entity.setDbWaiter(dbWaiter);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        User dbCheckOutUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(dbCheckOutUser != null) {
            entity.setDbCheckOutUser(dbCheckOutUser);
        }

        return entity;    
    }

    public PxOrderInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxOrderInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxOrderInfo> list = new ArrayList<PxOrderInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxOrderInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxOrderInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
