package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxRechargePlan;
import com.psi.easymanager.module.PxVipInfo;
import com.psi.easymanager.module.User;

import com.psi.easymanager.module.PxRechargeRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RechargeRecord".
*/
public class PxRechargeRecordDao extends AbstractDao<PxRechargeRecord, Long> {

    public static final String TABLENAME = "RechargeRecord";

    /**
     * Properties of entity PxRechargeRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Score = new Property(1, Integer.class, "score", false, "SCORE");
        public final static Property ObjectId = new Property(2, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Money = new Property(3, Double.class, "money", false, "MONEY");
        public final static Property Giving = new Property(4, Double.class, "giving", false, "GIVING");
        public final static Property IsUpLoad = new Property(5, Boolean.class, "isUpLoad", false, "IS_UP_LOAD");
        public final static Property DelFlag = new Property(6, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property RechargeTime = new Property(7, java.util.Date.class, "rechargeTime", false, "RECHARGE_TIME");
        public final static Property UserId = new Property(8, long.class, "userId", false, "USER_ID");
        public final static Property ShiftChangeType = new Property(9, String.class, "shiftChangeType", false, "SHIFT_CHANGE_TYPE");
        public final static Property RechargeType = new Property(10, String.class, "rechargeType", false, "RECHARGE_TYPE");
        public final static Property PxVipInfoId = new Property(11, long.class, "pxVipInfoId", false, "PX_VIP_INFO_ID");
        public final static Property PxRechargePlanId = new Property(12, long.class, "pxRechargePlanId", false, "PX_RECHARGE_PLAN_ID");
    };

    private DaoSession daoSession;


    public PxRechargeRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PxRechargeRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RechargeRecord\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"SCORE\" INTEGER," + // 1: score
                "\"OBJECT_ID\" TEXT," + // 2: objectId
                "\"MONEY\" REAL," + // 3: money
                "\"GIVING\" REAL," + // 4: giving
                "\"IS_UP_LOAD\" INTEGER," + // 5: isUpLoad
                "\"DEL_FLAG\" TEXT," + // 6: delFlag
                "\"RECHARGE_TIME\" INTEGER," + // 7: rechargeTime
                "\"USER_ID\" INTEGER NOT NULL ," + // 8: userId
                "\"SHIFT_CHANGE_TYPE\" TEXT," + // 9: shiftChangeType
                "\"RECHARGE_TYPE\" TEXT," + // 10: rechargeType
                "\"PX_VIP_INFO_ID\" INTEGER NOT NULL ," + // 11: pxVipInfoId
                "\"PX_RECHARGE_PLAN_ID\" INTEGER NOT NULL );"); // 12: pxRechargePlanId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RechargeRecord\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxRechargeRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer score = entity.getScore();
        if (score != null) {
            stmt.bindLong(2, score);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(3, objectId);
        }
 
        Double money = entity.getMoney();
        if (money != null) {
            stmt.bindDouble(4, money);
        }
 
        Double giving = entity.getGiving();
        if (giving != null) {
            stmt.bindDouble(5, giving);
        }
 
        Boolean isUpLoad = entity.getIsUpLoad();
        if (isUpLoad != null) {
            stmt.bindLong(6, isUpLoad ? 1L: 0L);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(7, delFlag);
        }
 
        java.util.Date rechargeTime = entity.getRechargeTime();
        if (rechargeTime != null) {
            stmt.bindLong(8, rechargeTime.getTime());
        }
        stmt.bindLong(9, entity.getUserId());
 
        String shiftChangeType = entity.getShiftChangeType();
        if (shiftChangeType != null) {
            stmt.bindString(10, shiftChangeType);
        }
 
        String rechargeType = entity.getRechargeType();
        if (rechargeType != null) {
            stmt.bindString(11, rechargeType);
        }
        stmt.bindLong(12, entity.getPxVipInfoId());
        stmt.bindLong(13, entity.getPxRechargePlanId());
    }

    @Override
    protected void attachEntity(PxRechargeRecord entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxRechargeRecord readEntity(Cursor cursor, int offset) {
        PxRechargeRecord entity = new PxRechargeRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // score
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // objectId
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // money
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // giving
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // isUpLoad
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // delFlag
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // rechargeTime
            cursor.getLong(offset + 8), // userId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // shiftChangeType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // rechargeType
            cursor.getLong(offset + 11), // pxVipInfoId
            cursor.getLong(offset + 12) // pxRechargePlanId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxRechargeRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScore(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setObjectId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMoney(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setGiving(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setIsUpLoad(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setDelFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRechargeTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUserId(cursor.getLong(offset + 8));
        entity.setShiftChangeType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRechargeType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPxVipInfoId(cursor.getLong(offset + 11));
        entity.setPxRechargePlanId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxRechargeRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxRechargeRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxVipInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getPxRechargePlanDao().getAllColumns());
            builder.append(" FROM RechargeRecord T");
            builder.append(" LEFT JOIN User T0 ON T.\"USER_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN VipInfo T1 ON T.\"PX_VIP_INFO_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN RechargePlan T2 ON T.\"PX_RECHARGE_PLAN_ID\"=T2.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxRechargeRecord loadCurrentDeep(Cursor cursor, boolean lock) {
        PxRechargeRecord entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User dbUser = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(dbUser != null) {
            entity.setDbUser(dbUser);
        }
        offset += daoSession.getUserDao().getAllColumns().length;

        PxVipInfo dbVipInfo = loadCurrentOther(daoSession.getPxVipInfoDao(), cursor, offset);
         if(dbVipInfo != null) {
            entity.setDbVipInfo(dbVipInfo);
        }
        offset += daoSession.getPxVipInfoDao().getAllColumns().length;

        PxRechargePlan dbRechargePlan = loadCurrentOther(daoSession.getPxRechargePlanDao(), cursor, offset);
         if(dbRechargePlan != null) {
            entity.setDbRechargePlan(dbRechargePlan);
        }

        return entity;    
    }

    public PxRechargeRecord loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxRechargeRecord> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxRechargeRecord> list = new ArrayList<PxRechargeRecord>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxRechargeRecord> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxRechargeRecord> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
