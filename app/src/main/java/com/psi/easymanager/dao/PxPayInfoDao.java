package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.psi.easymanager.module.PxOrderInfo;

import com.psi.easymanager.module.PxPayInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PxPayInfo".
*/
public class PxPayInfoDao extends AbstractDao<PxPayInfo, Long> {

    public static final String TABLENAME = "PxPayInfo";

    /**
     * Properties of entity PxPayInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PayTime = new Property(1, java.util.Date.class, "payTime", false, "PAY_TIME");
        public final static Property Received = new Property(2, Double.class, "received", false, "RECEIVED");
        public final static Property Change = new Property(3, Double.class, "change", false, "CHANGE");
        public final static Property VoucherCode = new Property(4, String.class, "voucherCode", false, "VOUCHER_CODE");
        public final static Property TradeNo = new Property(5, String.class, "tradeNo", false, "TRADE_NO");
        public final static Property Remarks = new Property(6, String.class, "remarks", false, "REMARKS");
        public final static Property VipMobile = new Property(7, String.class, "vipMobile", false, "VIP_MOBILE");
        public final static Property VipId = new Property(8, String.class, "vipId", false, "VIP_ID");
        public final static Property IdCardNum = new Property(9, String.class, "idCardNum", false, "ID_CARD_NUM");
        public final static Property PaymentId = new Property(10, String.class, "paymentId", false, "PAYMENT_ID");
        public final static Property PaymentType = new Property(11, String.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property PaymentName = new Property(12, String.class, "paymentName", false, "PAYMENT_NAME");
        public final static Property SalesAmount = new Property(13, String.class, "salesAmount", false, "SALES_AMOUNT");
        public final static Property PayPrivilege = new Property(14, Double.class, "payPrivilege", false, "PAY_PRIVILEGE");
        public final static Property TicketCode = new Property(15, String.class, "ticketCode", false, "TICKET_CODE");
        public final static Property PxOrderInfoId = new Property(16, Long.class, "pxOrderInfoId", false, "PX_ORDER_INFO_ID");
    };

    private DaoSession daoSession;

    private Query<PxPayInfo> pxOrderInfo_DbPayInfoListQuery;

    public PxPayInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PxPayInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PxPayInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"PAY_TIME\" INTEGER," + // 1: payTime
                "\"RECEIVED\" REAL," + // 2: received
                "\"CHANGE\" REAL," + // 3: change
                "\"VOUCHER_CODE\" TEXT," + // 4: voucherCode
                "\"TRADE_NO\" TEXT," + // 5: tradeNo
                "\"REMARKS\" TEXT," + // 6: remarks
                "\"VIP_MOBILE\" TEXT," + // 7: vipMobile
                "\"VIP_ID\" TEXT," + // 8: vipId
                "\"ID_CARD_NUM\" TEXT," + // 9: idCardNum
                "\"PAYMENT_ID\" TEXT," + // 10: paymentId
                "\"PAYMENT_TYPE\" TEXT," + // 11: paymentType
                "\"PAYMENT_NAME\" TEXT," + // 12: paymentName
                "\"SALES_AMOUNT\" TEXT," + // 13: salesAmount
                "\"PAY_PRIVILEGE\" REAL," + // 14: payPrivilege
                "\"TICKET_CODE\" TEXT," + // 15: ticketCode
                "\"PX_ORDER_INFO_ID\" INTEGER);"); // 16: pxOrderInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PxPayInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxPayInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(2, payTime.getTime());
        }
 
        Double received = entity.getReceived();
        if (received != null) {
            stmt.bindDouble(3, received);
        }
 
        Double change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(4, change);
        }
 
        String voucherCode = entity.getVoucherCode();
        if (voucherCode != null) {
            stmt.bindString(5, voucherCode);
        }
 
        String tradeNo = entity.getTradeNo();
        if (tradeNo != null) {
            stmt.bindString(6, tradeNo);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(7, remarks);
        }
 
        String vipMobile = entity.getVipMobile();
        if (vipMobile != null) {
            stmt.bindString(8, vipMobile);
        }
 
        String vipId = entity.getVipId();
        if (vipId != null) {
            stmt.bindString(9, vipId);
        }
 
        String idCardNum = entity.getIdCardNum();
        if (idCardNum != null) {
            stmt.bindString(10, idCardNum);
        }
 
        String paymentId = entity.getPaymentId();
        if (paymentId != null) {
            stmt.bindString(11, paymentId);
        }
 
        String paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindString(12, paymentType);
        }
 
        String paymentName = entity.getPaymentName();
        if (paymentName != null) {
            stmt.bindString(13, paymentName);
        }
 
        String salesAmount = entity.getSalesAmount();
        if (salesAmount != null) {
            stmt.bindString(14, salesAmount);
        }
 
        Double payPrivilege = entity.getPayPrivilege();
        if (payPrivilege != null) {
            stmt.bindDouble(15, payPrivilege);
        }
 
        String ticketCode = entity.getTicketCode();
        if (ticketCode != null) {
            stmt.bindString(16, ticketCode);
        }
 
        Long pxOrderInfoId = entity.getPxOrderInfoId();
        if (pxOrderInfoId != null) {
            stmt.bindLong(17, pxOrderInfoId);
        }
    }

    @Override
    protected void attachEntity(PxPayInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxPayInfo readEntity(Cursor cursor, int offset) {
        PxPayInfo entity = new PxPayInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // payTime
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // received
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // change
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // voucherCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tradeNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remarks
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // vipMobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vipId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // idCardNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // paymentId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // paymentType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // paymentName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // salesAmount
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // payPrivilege
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ticketCode
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // pxOrderInfoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxPayInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPayTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setReceived(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setChange(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setVoucherCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTradeNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemarks(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVipMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVipId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIdCardNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPaymentId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPaymentType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPaymentName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSalesAmount(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPayPrivilege(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setTicketCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPxOrderInfoId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxPayInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxPayInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dbPayInfoList" to-many relationship of PxOrderInfo. */
    public List<PxPayInfo> _queryPxOrderInfo_DbPayInfoList(Long pxOrderInfoId) {
        synchronized (this) {
            if (pxOrderInfo_DbPayInfoListQuery == null) {
                QueryBuilder<PxPayInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PxOrderInfoId.eq(null));
                pxOrderInfo_DbPayInfoListQuery = queryBuilder.build();
            }
        }
        Query<PxPayInfo> query = pxOrderInfo_DbPayInfoListQuery.forCurrentThread();
        query.setParameter(0, pxOrderInfoId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxOrderInfoDao().getAllColumns());
            builder.append(" FROM PxPayInfo T");
            builder.append(" LEFT JOIN OrderInfo T0 ON T.\"PX_ORDER_INFO_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PxPayInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        PxPayInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxOrderInfo dbOrder = loadCurrentOther(daoSession.getPxOrderInfoDao(), cursor, offset);
        entity.setDbOrder(dbOrder);

        return entity;    
    }

    public PxPayInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PxPayInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PxPayInfo> list = new ArrayList<PxPayInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PxPayInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PxPayInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
