package com.psi.easymanager.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxVoucher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PxVoucher".
*/
public class PxVoucherDao extends AbstractDao<PxVoucher, Long> {

    public static final String TABLENAME = "PxVoucher";

    /**
     * Properties of entity PxVoucher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DelFlag = new Property(1, String.class, "delFlag", false, "DEL_FLAG");
        public final static Property ObjectId = new Property(2, String.class, "objectId", false, "OBJECT_ID");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property Price = new Property(4, Double.class, "price", false, "PRICE");
        public final static Property DeratePrice = new Property(5, Double.class, "deratePrice", false, "DERATE_PRICE");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
        public final static Property StartDate = new Property(7, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(8, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property Permanent = new Property(9, String.class, "permanent", false, "PERMANENT");
    };


    public PxVoucherDao(DaoConfig config) {
        super(config);
    }
    
    public PxVoucherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PxVoucher\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"DEL_FLAG\" TEXT," + // 1: delFlag
                "\"OBJECT_ID\" TEXT," + // 2: objectId
                "\"CODE\" TEXT," + // 3: code
                "\"PRICE\" REAL," + // 4: price
                "\"DERATE_PRICE\" REAL," + // 5: deratePrice
                "\"TYPE\" TEXT," + // 6: type
                "\"START_DATE\" INTEGER," + // 7: startDate
                "\"END_DATE\" INTEGER," + // 8: endDate
                "\"PERMANENT\" TEXT);"); // 9: permanent
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PxVoucher\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PxVoucher entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String delFlag = entity.getDelFlag();
        if (delFlag != null) {
            stmt.bindString(2, delFlag);
        }
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(3, objectId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        Double deratePrice = entity.getDeratePrice();
        if (deratePrice != null) {
            stmt.bindDouble(6, deratePrice);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(8, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(9, endDate.getTime());
        }
 
        String permanent = entity.getPermanent();
        if (permanent != null) {
            stmt.bindString(10, permanent);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PxVoucher readEntity(Cursor cursor, int offset) {
        PxVoucher entity = new PxVoucher( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // delFlag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // objectId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // deratePrice
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // type
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // startDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // endDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // permanent
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PxVoucher entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDelFlag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setObjectId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setDeratePrice(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStartDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setEndDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPermanent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PxVoucher entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PxVoucher entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
