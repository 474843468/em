package com.psi.easymanager.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.psi.easymanager.module.PxOrderInfo;
import com.psi.easymanager.module.PxPayInfo;

import com.psi.easymanager.module.EPaymentInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPaymentInfo".
*/
public class EPaymentInfoDao extends AbstractDao<EPaymentInfo, Long> {

    public static final String TABLENAME = "EPaymentInfo";

    /**
     * Properties of entity EPaymentInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property PayTime = new Property(2, java.util.Date.class, "payTime", false, "PAY_TIME");
        public final static Property OrderNo = new Property(3, String.class, "orderNo", false, "ORDER_NO");
        public final static Property TableName = new Property(4, String.class, "tableName", false, "TABLE_NAME");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property TradeNo = new Property(6, String.class, "tradeNo", false, "TRADE_NO");
        public final static Property Price = new Property(7, Double.class, "price", false, "PRICE");
        public final static Property IsHandled = new Property(8, String.class, "isHandled", false, "IS_HANDLED");
        public final static Property PayInfoId = new Property(9, Long.class, "payInfoId", false, "PAY_INFO_ID");
        public final static Property OrderInfoId = new Property(10, Long.class, "orderInfoId", false, "ORDER_INFO_ID");
    };

    private DaoSession daoSession;


    public EPaymentInfoDao(DaoConfig config) {
        super(config);
    }
    
    public EPaymentInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPaymentInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ASC ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"PAY_TIME\" INTEGER," + // 2: payTime
                "\"ORDER_NO\" TEXT," + // 3: orderNo
                "\"TABLE_NAME\" TEXT," + // 4: tableName
                "\"STATUS\" TEXT," + // 5: status
                "\"TRADE_NO\" TEXT," + // 6: tradeNo
                "\"PRICE\" REAL," + // 7: price
                "\"IS_HANDLED\" TEXT," + // 8: isHandled
                "\"PAY_INFO_ID\" INTEGER," + // 9: payInfoId
                "\"ORDER_INFO_ID\" INTEGER);"); // 10: orderInfoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPaymentInfo\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EPaymentInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        java.util.Date payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(3, payTime.getTime());
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(4, orderNo);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(5, tableName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String tradeNo = entity.getTradeNo();
        if (tradeNo != null) {
            stmt.bindString(7, tradeNo);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(8, price);
        }
 
        String isHandled = entity.getIsHandled();
        if (isHandled != null) {
            stmt.bindString(9, isHandled);
        }
 
        Long payInfoId = entity.getPayInfoId();
        if (payInfoId != null) {
            stmt.bindLong(10, payInfoId);
        }
 
        Long orderInfoId = entity.getOrderInfoId();
        if (orderInfoId != null) {
            stmt.bindLong(11, orderInfoId);
        }
    }

    @Override
    protected void attachEntity(EPaymentInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EPaymentInfo readEntity(Cursor cursor, int offset) {
        EPaymentInfo entity = new EPaymentInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // payTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tableName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tradeNo
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isHandled
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // payInfoId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // orderInfoId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EPaymentInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPayTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setOrderNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTableName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTradeNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setIsHandled(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPayInfoId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setOrderInfoId(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EPaymentInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EPaymentInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getPxPayInfoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPxOrderInfoDao().getAllColumns());
            builder.append(" FROM EPaymentInfo T");
            builder.append(" LEFT JOIN PxPayInfo T0 ON T.\"PAY_INFO_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN OrderInfo T1 ON T.\"ORDER_INFO_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected EPaymentInfo loadCurrentDeep(Cursor cursor, boolean lock) {
        EPaymentInfo entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        PxPayInfo dbPayInfo = loadCurrentOther(daoSession.getPxPayInfoDao(), cursor, offset);
        entity.setDbPayInfo(dbPayInfo);
        offset += daoSession.getPxPayInfoDao().getAllColumns().length;

        PxOrderInfo dbOrder = loadCurrentOther(daoSession.getPxOrderInfoDao(), cursor, offset);
        entity.setDbOrder(dbOrder);

        return entity;    
    }

    public EPaymentInfo loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<EPaymentInfo> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<EPaymentInfo> list = new ArrayList<EPaymentInfo>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<EPaymentInfo> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<EPaymentInfo> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
