package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxDiscounSchemeDao;
import com.psi.easymanager.dao.PxVipCardTypeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END

/**
 * 会员卡类型
 */
public class PxVipCardType implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 卡类型名称
     */
     @Expose
    private String name;
    /**
     * 优惠方式（0：使用会员价 1：打折 2：使用折扣方案）
     */
     @Expose
    private String type;
    /**
     * 押金
     */
     @Expose
    private Integer marginForegift;
    /**
     * 折扣率
     */
     @Expose
    private Integer rechargeScore;
    /**
     * 是否需要密码（0：不需要 1：需要）
     */
     @Expose
    private String requirePassword;
    /**
     * 消费时是否赠送积分(0：不赠送 1：赠送)
     */
     @Expose
    private String consumeSendScore;
    /**
     * 充值多少元送1积分
     */
     @Expose
    private Integer discountRate;
    /**
     * 消费多少元送1积分
     */
     @Expose
    private Integer consumeScore;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    private Long pxDiscounSchemeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxVipCardTypeDao myDao;

    private PxDiscounScheme dbDiscounScheme;
    private Long dbDiscounScheme__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    @Expose
    private PxDiscounScheme pxDiscounScheme;// 折扣方案
    public static final String NO_VALIDATE_PASSWORD = "0";//不需要密码验证
    public static final String VALIDATE_PASSWORD = "1";
    public static final String USE_VIP_PRICE = "0";//优惠方式（0：使用会员价 1：打折 2：使用折扣方案）
    public static final String DISCOUNT= "1";
    public static final String DISCOUNT_SCHEME = "2";
    // KEEP FIELDS END

    public PxVipCardType() {
    }

    public PxVipCardType(Long id) {
        this.id = id;
    }

    public PxVipCardType(Long id, String objectId, String name, String type, Integer marginForegift, Integer rechargeScore, String requirePassword, String consumeSendScore, Integer discountRate, Integer consumeScore, String delFlag, Long pxDiscounSchemeId) {
        this.id = id;
        this.objectId = objectId;
        this.name = name;
        this.type = type;
        this.marginForegift = marginForegift;
        this.rechargeScore = rechargeScore;
        this.requirePassword = requirePassword;
        this.consumeSendScore = consumeSendScore;
        this.discountRate = discountRate;
        this.consumeScore = consumeScore;
        this.delFlag = delFlag;
        this.pxDiscounSchemeId = pxDiscounSchemeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxVipCardTypeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getMarginForegift() {
        return marginForegift;
    }

    public void setMarginForegift(Integer marginForegift) {
        this.marginForegift = marginForegift;
    }

    public Integer getRechargeScore() {
        return rechargeScore;
    }

    public void setRechargeScore(Integer rechargeScore) {
        this.rechargeScore = rechargeScore;
    }

    public String getRequirePassword() {
        return requirePassword;
    }

    public void setRequirePassword(String requirePassword) {
        this.requirePassword = requirePassword;
    }

    public String getConsumeSendScore() {
        return consumeSendScore;
    }

    public void setConsumeSendScore(String consumeSendScore) {
        this.consumeSendScore = consumeSendScore;
    }

    public Integer getDiscountRate() {
        return discountRate;
    }

    public void setDiscountRate(Integer discountRate) {
        this.discountRate = discountRate;
    }

    public Integer getConsumeScore() {
        return consumeScore;
    }

    public void setConsumeScore(Integer consumeScore) {
        this.consumeScore = consumeScore;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public Long getPxDiscounSchemeId() {
        return pxDiscounSchemeId;
    }

    public void setPxDiscounSchemeId(Long pxDiscounSchemeId) {
        this.pxDiscounSchemeId = pxDiscounSchemeId;
    }

    /** To-one relationship, resolved on first access. */
    public PxDiscounScheme getDbDiscounScheme() {
        Long __key = this.pxDiscounSchemeId;
        if (dbDiscounScheme__resolvedKey == null || !dbDiscounScheme__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxDiscounSchemeDao targetDao = daoSession.getPxDiscounSchemeDao();
            PxDiscounScheme dbDiscounSchemeNew = targetDao.load(__key);
            synchronized (this) {
                dbDiscounScheme = dbDiscounSchemeNew;
            	dbDiscounScheme__resolvedKey = __key;
            }
        }
        return dbDiscounScheme;
    }

    public void setDbDiscounScheme(PxDiscounScheme dbDiscounScheme) {
        synchronized (this) {
            this.dbDiscounScheme = dbDiscounScheme;
            pxDiscounSchemeId = dbDiscounScheme == null ? null : dbDiscounScheme.getId();
            dbDiscounScheme__resolvedKey = pxDiscounSchemeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public PxDiscounScheme getPxDiscounScheme() {
        return pxDiscounScheme;
    }

    public void setPxDiscounScheme(PxDiscounScheme pxDiscounScheme) {
        this.pxDiscounScheme = pxDiscounScheme;
    }
    // KEEP METHODS END

}
