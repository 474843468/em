package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxComboGroupDao;
import com.psi.easymanager.dao.PxProductInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END

/**
 * 套餐分组
 */
public class PxComboGroup implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 分组名称
     */
     @Expose
    private String name;
    /**
     * 0:允许自选 1：必须全部选择
     */
     @Expose
    private String type;
    /**
     * 允许点单的数量,默认为1
     */
     @Expose
    private Integer allowNum;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    private long dbComboId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxComboGroupDao myDao;

    private PxProductInfo dbCombo;
    private Long dbCombo__resolvedKey;


    // KEEP FIELDS - put your custom fields here

  @Expose private PxProductInfo comboId;    //对应商品(即套餐)

  public static final String TYPE_REQUIRED = "1";//必选
  public static final String TYPE_OPTIONAL= "0";//可选
    // KEEP FIELDS END

    public PxComboGroup() {
    }

    public PxComboGroup(Long id) {
        this.id = id;
    }

    public PxComboGroup(Long id, String objectId, String name, String type, Integer allowNum, String delFlag, long dbComboId) {
        this.id = id;
        this.objectId = objectId;
        this.name = name;
        this.type = type;
        this.allowNum = allowNum;
        this.delFlag = delFlag;
        this.dbComboId = dbComboId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxComboGroupDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Integer getAllowNum() {
        return allowNum;
    }

    public void setAllowNum(Integer allowNum) {
        this.allowNum = allowNum;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public long getDbComboId() {
        return dbComboId;
    }

    public void setDbComboId(long dbComboId) {
        this.dbComboId = dbComboId;
    }

    /** To-one relationship, resolved on first access. */
    public PxProductInfo getDbCombo() {
        long __key = this.dbComboId;
        if (dbCombo__resolvedKey == null || !dbCombo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
            PxProductInfo dbComboNew = targetDao.load(__key);
            synchronized (this) {
                dbCombo = dbComboNew;
            	dbCombo__resolvedKey = __key;
            }
        }
        return dbCombo;
    }

    public void setDbCombo(PxProductInfo dbCombo) {
        if (dbCombo == null) {
            throw new DaoException("To-one property 'dbComboId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbCombo = dbCombo;
            dbComboId = dbCombo.getId();
            dbCombo__resolvedKey = dbComboId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

  public PxProductInfo getComboId() {
    return comboId;
  }

  public void setComboId(PxProductInfo comboId) {
    this.comboId = comboId;
  }
    // KEEP METHODS END

}
