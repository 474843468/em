package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxBuyCouponsDao;
import com.psi.easymanager.dao.PxPaymentModeDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END

/**
 * 团购群
 */
public class PxBuyCoupons implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    /**
     * 团购券名称
     */
     @Expose
    private String name;
    /**
     * 金额
     */
     @Expose
    private Double amount;
    /**
     * 抵消金额
     */
     @Expose
    private Double offsetAmount;
    private Long paymentModeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxBuyCouponsDao myDao;

    private PxPaymentMode dbPayment;
    private Long dbPayment__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    @Expose
    private PxPaymentMode pxPaymentMode;
    // KEEP FIELDS END

    public PxBuyCoupons() {
    }

    public PxBuyCoupons(Long id) {
        this.id = id;
    }

    public PxBuyCoupons(Long id, String objectId, String delFlag, String name, Double amount, Double offsetAmount, Long paymentModeId) {
        this.id = id;
        this.objectId = objectId;
        this.delFlag = delFlag;
        this.name = name;
        this.amount = amount;
        this.offsetAmount = offsetAmount;
        this.paymentModeId = paymentModeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxBuyCouponsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getAmount() {
        return amount;
    }

    public void setAmount(Double amount) {
        this.amount = amount;
    }

    public Double getOffsetAmount() {
        return offsetAmount;
    }

    public void setOffsetAmount(Double offsetAmount) {
        this.offsetAmount = offsetAmount;
    }

    public Long getPaymentModeId() {
        return paymentModeId;
    }

    public void setPaymentModeId(Long paymentModeId) {
        this.paymentModeId = paymentModeId;
    }

    /** To-one relationship, resolved on first access. */
    public PxPaymentMode getDbPayment() {
        Long __key = this.paymentModeId;
        if (dbPayment__resolvedKey == null || !dbPayment__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPaymentModeDao targetDao = daoSession.getPxPaymentModeDao();
            PxPaymentMode dbPaymentNew = targetDao.load(__key);
            synchronized (this) {
                dbPayment = dbPaymentNew;
            	dbPayment__resolvedKey = __key;
            }
        }
        return dbPayment;
    }

    public void setDbPayment(PxPaymentMode dbPayment) {
        synchronized (this) {
            this.dbPayment = dbPayment;
            paymentModeId = dbPayment == null ? null : dbPayment.getId();
            dbPayment__resolvedKey = paymentModeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public PxPaymentMode getPxPaymentMode() {
        return pxPaymentMode;
    }

    public void setPxPaymentMode(PxPaymentMode pxPaymentMode) {
        this.pxPaymentMode = pxPaymentMode;
    }
    // KEEP METHODS END

}
