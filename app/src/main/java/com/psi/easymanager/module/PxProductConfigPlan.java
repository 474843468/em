package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxPrinterInfoDao;
import com.psi.easymanager.dao.PxProductConfigPlanDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END

/**
 * 配菜方案
 */
public class PxProductConfigPlan implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 配菜方案名称
     */
     @Expose
    private String name;
    /**
     * 是否一菜一切 1是 0 否
     */
     @Expose
    private String flag;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    /**
     * 打印份数
     */
     @Expose
    private Integer count;
    private Long pxPrinterInfoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxProductConfigPlanDao myDao;

    private PxPrinterInfo dbPrinter;
    private Long dbPrinter__resolvedKey;


    // KEEP FIELDS - put your custom fields here
  @Expose PxPrinterInfo printer;
  public static final String ONCE_PRINT = "1";
  public static final String NO_ONCE_PRINT = "0";
  //配菜方案 打印模式 0:网口 1:蓝牙
  private String deviceMode = "0";
  public static final String DEVICE_MODE_NET = "0";
  public static final String DEVICE_MODE_BT = "1";
    // KEEP FIELDS END

    public PxProductConfigPlan() {
    }

    public PxProductConfigPlan(Long id) {
        this.id = id;
    }

    public PxProductConfigPlan(Long id, String objectId, String name, String flag, String delFlag, Integer count, Long pxPrinterInfoId) {
        this.id = id;
        this.objectId = objectId;
        this.name = name;
        this.flag = flag;
        this.delFlag = delFlag;
        this.count = count;
        this.pxPrinterInfoId = pxPrinterInfoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxProductConfigPlanDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getFlag() {
        return flag;
    }

    public void setFlag(String flag) {
        this.flag = flag;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public Long getPxPrinterInfoId() {
        return pxPrinterInfoId;
    }

    public void setPxPrinterInfoId(Long pxPrinterInfoId) {
        this.pxPrinterInfoId = pxPrinterInfoId;
    }

    /** To-one relationship, resolved on first access. */
    public PxPrinterInfo getDbPrinter() {
        Long __key = this.pxPrinterInfoId;
        if (dbPrinter__resolvedKey == null || !dbPrinter__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPrinterInfoDao targetDao = daoSession.getPxPrinterInfoDao();
            PxPrinterInfo dbPrinterNew = targetDao.load(__key);
            synchronized (this) {
                dbPrinter = dbPrinterNew;
            	dbPrinter__resolvedKey = __key;
            }
        }
        return dbPrinter;
    }

    public void setDbPrinter(PxPrinterInfo dbPrinter) {
        synchronized (this) {
            this.dbPrinter = dbPrinter;
            pxPrinterInfoId = dbPrinter == null ? null : dbPrinter.getId();
            dbPrinter__resolvedKey = pxPrinterInfoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
  public PxPrinterInfo getPrinter() {
    return printer;
  }

  public void setPrinter(PxPrinterInfo printer) {
    this.printer = printer;
  }



  public String getDeviceMode() {
    return deviceMode;
  }

  public void setDeviceMode(String deviceMode) {
    this.deviceMode = deviceMode;
  }
    // KEEP METHODS END

}
