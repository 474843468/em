package com.psi.easymanager.module;

import com.google.gson.annotations.Expose;
import com.psi.easymanager.dao.DaoSession;
import com.psi.easymanager.dao.PxFormatInfoDao;
import com.psi.easymanager.dao.PxMethodInfoDao;
import com.psi.easymanager.dao.PxOptReasonDao;
import com.psi.easymanager.dao.PxOrderDetailsDao;
import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxProductInfoDao;
import com.psi.easymanager.dao.dbUtil.DaoServiceUtil;
import com.psi.easymanager.print.module.PackagePrintDetails;
import com.psi.easymanager.utils.NumberFormatUtils;
import de.greenrobot.dao.DaoException;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS
// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "OrderDetails".
 */
public class PxOrderDetails implements java.io.Serializable {

     @Expose
    private Long id;
    /**
     * 对应服务器id
     */
    private String objectId;
    /**
     * 价格
     */
     @Expose
    private Double price;
    /**
     * 会员价格
     */
     @Expose
    private Double vipPrice;
    /**
     * 数量
     */
     @Expose
    private Double num;
    /**
     * 商品状态(0:正常 1：延迟)
     */
     @Expose
    private String status;
    /**
     * 折扣率(0-100)
     */
     @Expose
    private Integer discountRate;
    /**
     * 是否打折（0：是 1：否）
     */
     @Expose
    private String isDiscount;
    /**
     * 下单状态(0:未下单,1:已下单,2:退货)
     */
     @Expose
    private String orderStatus;
    /**
     * 多单位数量 一般为重量
     */
     @Expose
    private Double multipleUnitNumber;
    /**
     * 已上菜 服务端使用
     */
     @Expose
    private Boolean isServing;
    /**
     * 操作时间(下单时间或者退货时间)
     */
     @Expose
    private java.util.Date operateTime;
    /**
     * 已打印
     */
     @Expose
    private Boolean isPrinted;
    /**
     * 结账时的最终价格,用于已结账单
     */
     @Expose
    private Double finalPrice;
    /**
     * 是否已清空，用于厨房打印
     */
     @Expose
    private Boolean isClear;
    /**
     * 是否为套餐内的Details
     */
     @Expose
    private String inCombo;
    /**
     * 是否为套餐Details
     */
     @Expose
    private String isComboDetails;
    /**
     * 是否为套餐所需的临时Details
     */
    private Boolean isComboTemporaryDetails;
    /**
     * 类型(必选或可选,用于套餐)
     */
     @Expose
    private String chooseType;
    /**
     * 是否为赠品
     */
     @Expose
    private String isGift;
    /**
     * 备注
     */
     @Expose
    private String remarks;
     @Expose
    private Double unitPrice;
     @Expose
    private Double unitVipPrice;
     @Expose
    private Double refundNum;
     @Expose
    private Double refundMultNum;
    private Long pxOrderInfoId;
    private Long pxProductInfoId;
    private Long pxComboDetailsId;
    private Long pxFormatInfoId;
    private Long pxMethodInfoId;
    private Long pxOptReasonId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxOrderDetailsDao myDao;

    private PxOrderInfo dbOrder;
    private Long dbOrder__resolvedKey;

    private PxProductInfo dbProduct;
    private Long dbProduct__resolvedKey;

    private PxOrderDetails dbComboDetails;
    private Long dbComboDetails__resolvedKey;

    private PxFormatInfo dbFormatInfo;
    private Long dbFormatInfo__resolvedKey;

    private PxMethodInfo dbMethodInfo;
    private Long dbMethodInfo__resolvedKey;

    private PxOptReason dbReason;
    private Long dbReason__resolvedKey;

    private List<PxOrderDetails> dbDetailsInCombo;

    // KEEP FIELDS - put your custom fields here

  public static final String STATUS_ORIDINARY = "0";//正常
  public static final String STATUS_DELAY = "1";//延迟

  public static final String ORDER_STATUS_UNORDER = "0";//未下单
  public static final String ORDER_STATUS_ORDER = "1";//已下单
  public static final String ORDER_STATUS_REFUND = "2";//退货

  public static final String IN_COMBO_FALSE = "0";//非套餐内

  public static final String IN_COMBO_TRUE = "1";//套餐内
  public static final String IS_COMBO_FALSE = "0";//非套餐

  public static final String IS_COMBO_TRUE = "1";//套餐
  public static final String TYPE_REQUIRED = "1";//必选商品

  public static final String TYPE_OPTIONAL = "0";//可选商品
  public static final String GIFT_FALSE = "0";//非赠品

  public static final String GIFT_TRUE = "1";//赠品

  @Expose private PxProductInfo mProductInfo;//用于向服务生发送

  private boolean isDiscountChecked;//标记选中，用于部分打折选择

  //用于makePrintDetails + 上传订单合并详情
  private PxProductInfo mPrintProd;
  private PxOrderInfo mPrintOrder;
  private PxFormatInfo mPrintFormat;
  private PxMethodInfo mPrintMethod;
  private PxOptReason mPrintReason;
  private PackagePrintDetails mPackagePrintDetails;//封装后厨打印信息
    // KEEP FIELDS END

    public PxOrderDetails() {
    }

    public PxOrderDetails(Long id) {
        this.id = id;
    }

    public PxOrderDetails(Long id, String objectId, Double price, Double vipPrice, Double num, String status, Integer discountRate, String isDiscount, String orderStatus, Double multipleUnitNumber, Boolean isServing, java.util.Date operateTime, Boolean isPrinted, Double finalPrice, Boolean isClear, String inCombo, String isComboDetails, Boolean isComboTemporaryDetails, String chooseType, String isGift, String remarks, Double unitPrice, Double unitVipPrice, Double refundNum, Double refundMultNum, Long pxOrderInfoId, Long pxProductInfoId, Long pxComboDetailsId, Long pxFormatInfoId, Long pxMethodInfoId, Long pxOptReasonId) {
        this.id = id;
        this.objectId = objectId;
        this.price = price;
        this.vipPrice = vipPrice;
        this.num = num;
        this.status = status;
        this.discountRate = discountRate;
        this.isDiscount = isDiscount;
        this.orderStatus = orderStatus;
        this.multipleUnitNumber = multipleUnitNumber;
        this.isServing = isServing;
        this.operateTime = operateTime;
        this.isPrinted = isPrinted;
        this.finalPrice = finalPrice;
        this.isClear = isClear;
        this.inCombo = inCombo;
        this.isComboDetails = isComboDetails;
        this.isComboTemporaryDetails = isComboTemporaryDetails;
        this.chooseType = chooseType;
        this.isGift = isGift;
        this.remarks = remarks;
        this.unitPrice = unitPrice;
        this.unitVipPrice = unitVipPrice;
        this.refundNum = refundNum;
        this.refundMultNum = refundMultNum;
        this.pxOrderInfoId = pxOrderInfoId;
        this.pxProductInfoId = pxProductInfoId;
        this.pxComboDetailsId = pxComboDetailsId;
        this.pxFormatInfoId = pxFormatInfoId;
        this.pxMethodInfoId = pxMethodInfoId;
        this.pxOptReasonId = pxOptReasonId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxOrderDetailsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Double getVipPrice() {
        return vipPrice;
    }

    public void setVipPrice(Double vipPrice) {
        this.vipPrice = vipPrice;
    }

    public Double getNum() {
        return num;
    }

    public void setNum(Double num) {
        this.num = num;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Integer getDiscountRate() {
        return discountRate;
    }

    public void setDiscountRate(Integer discountRate) {
        this.discountRate = discountRate;
    }

    public String getIsDiscount() {
        return isDiscount;
    }

    public void setIsDiscount(String isDiscount) {
        this.isDiscount = isDiscount;
    }

    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public Double getMultipleUnitNumber() {
        return multipleUnitNumber;
    }

    public void setMultipleUnitNumber(Double multipleUnitNumber) {
        this.multipleUnitNumber = multipleUnitNumber;
    }

    public Boolean getIsServing() {
        return isServing;
    }

    public void setIsServing(Boolean isServing) {
        this.isServing = isServing;
    }

    public java.util.Date getOperateTime() {
        return operateTime;
    }

    public void setOperateTime(java.util.Date operateTime) {
        this.operateTime = operateTime;
    }

    public Boolean getIsPrinted() {
        return isPrinted;
    }

    public void setIsPrinted(Boolean isPrinted) {
        this.isPrinted = isPrinted;
    }

    public Double getFinalPrice() {
        return finalPrice;
    }

    public void setFinalPrice(Double finalPrice) {
        this.finalPrice = finalPrice;
    }

    public Boolean getIsClear() {
        return isClear;
    }

    public void setIsClear(Boolean isClear) {
        this.isClear = isClear;
    }

    public String getInCombo() {
        return inCombo;
    }

    public void setInCombo(String inCombo) {
        this.inCombo = inCombo;
    }

    public String getIsComboDetails() {
        return isComboDetails;
    }

    public void setIsComboDetails(String isComboDetails) {
        this.isComboDetails = isComboDetails;
    }

    public Boolean getIsComboTemporaryDetails() {
        return isComboTemporaryDetails;
    }

    public void setIsComboTemporaryDetails(Boolean isComboTemporaryDetails) {
        this.isComboTemporaryDetails = isComboTemporaryDetails;
    }

    public String getChooseType() {
        return chooseType;
    }

    public void setChooseType(String chooseType) {
        this.chooseType = chooseType;
    }

    public String getIsGift() {
        return isGift;
    }

    public void setIsGift(String isGift) {
        this.isGift = isGift;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    /**
     * 单价
     */
    public Double getUnitPrice() {
        return unitPrice;
    }

    /**
     * 单价
     */
    public void setUnitPrice(Double unitPrice) {
        this.unitPrice = unitPrice;
    }

    /**
     * 单价(会员)
     */
    public Double getUnitVipPrice() {
        return unitVipPrice;
    }

    /**
     * 单价(会员)
     */
    public void setUnitVipPrice(Double unitVipPrice) {
        this.unitVipPrice = unitVipPrice;
    }

    /**
     * 已退数量
     */
    public Double getRefundNum() {
        return refundNum;
    }

    /**
     * 已退数量
     */
    public void setRefundNum(Double refundNum) {
        this.refundNum = refundNum;
    }

    /**
     * 已退重量
     */
    public Double getRefundMultNum() {
        return refundMultNum;
    }

    /**
     * 已退重量
     */
    public void setRefundMultNum(Double refundMultNum) {
        this.refundMultNum = refundMultNum;
    }

    public Long getPxOrderInfoId() {
        return pxOrderInfoId;
    }

    public void setPxOrderInfoId(Long pxOrderInfoId) {
        this.pxOrderInfoId = pxOrderInfoId;
    }

    public Long getPxProductInfoId() {
        return pxProductInfoId;
    }

    public void setPxProductInfoId(Long pxProductInfoId) {
        this.pxProductInfoId = pxProductInfoId;
    }

    public Long getPxComboDetailsId() {
        return pxComboDetailsId;
    }

    public void setPxComboDetailsId(Long pxComboDetailsId) {
        this.pxComboDetailsId = pxComboDetailsId;
    }

    public Long getPxFormatInfoId() {
        return pxFormatInfoId;
    }

    public void setPxFormatInfoId(Long pxFormatInfoId) {
        this.pxFormatInfoId = pxFormatInfoId;
    }

    public Long getPxMethodInfoId() {
        return pxMethodInfoId;
    }

    public void setPxMethodInfoId(Long pxMethodInfoId) {
        this.pxMethodInfoId = pxMethodInfoId;
    }

    public Long getPxOptReasonId() {
        return pxOptReasonId;
    }

    public void setPxOptReasonId(Long pxOptReasonId) {
        this.pxOptReasonId = pxOptReasonId;
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderInfo getDbOrder() {
        Long __key = this.pxOrderInfoId;
        if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
            PxOrderInfo dbOrderNew = targetDao.load(__key);
            synchronized (this) {
                dbOrder = dbOrderNew;
            	dbOrder__resolvedKey = __key;
            }
        }
        return dbOrder;
    }

    public void setDbOrder(PxOrderInfo dbOrder) {
        synchronized (this) {
            this.dbOrder = dbOrder;
            pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
            dbOrder__resolvedKey = pxOrderInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxProductInfo getDbProduct() {
        Long __key = this.pxProductInfoId;
        if (dbProduct__resolvedKey == null || !dbProduct__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
            PxProductInfo dbProductNew = targetDao.load(__key);
            synchronized (this) {
                dbProduct = dbProductNew;
            	dbProduct__resolvedKey = __key;
            }
        }
        return dbProduct;
    }

    public void setDbProduct(PxProductInfo dbProduct) {
        synchronized (this) {
            this.dbProduct = dbProduct;
            pxProductInfoId = dbProduct == null ? null : dbProduct.getId();
            dbProduct__resolvedKey = pxProductInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderDetails getDbComboDetails() {
        Long __key = this.pxComboDetailsId;
        if (dbComboDetails__resolvedKey == null || !dbComboDetails__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderDetailsDao targetDao = daoSession.getPxOrderDetailsDao();
            PxOrderDetails dbComboDetailsNew = targetDao.load(__key);
            synchronized (this) {
                dbComboDetails = dbComboDetailsNew;
            	dbComboDetails__resolvedKey = __key;
            }
        }
        return dbComboDetails;
    }

    public void setDbComboDetails(PxOrderDetails dbComboDetails) {
        synchronized (this) {
            this.dbComboDetails = dbComboDetails;
            pxComboDetailsId = dbComboDetails == null ? null : dbComboDetails.getId();
            dbComboDetails__resolvedKey = pxComboDetailsId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxFormatInfo getDbFormatInfo() {
        Long __key = this.pxFormatInfoId;
        if (dbFormatInfo__resolvedKey == null || !dbFormatInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxFormatInfoDao targetDao = daoSession.getPxFormatInfoDao();
            PxFormatInfo dbFormatInfoNew = targetDao.load(__key);
            synchronized (this) {
                dbFormatInfo = dbFormatInfoNew;
            	dbFormatInfo__resolvedKey = __key;
            }
        }
        return dbFormatInfo;
    }

    public void setDbFormatInfo(PxFormatInfo dbFormatInfo) {
        synchronized (this) {
            this.dbFormatInfo = dbFormatInfo;
            pxFormatInfoId = dbFormatInfo == null ? null : dbFormatInfo.getId();
            dbFormatInfo__resolvedKey = pxFormatInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxMethodInfo getDbMethodInfo() {
        Long __key = this.pxMethodInfoId;
        if (dbMethodInfo__resolvedKey == null || !dbMethodInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxMethodInfoDao targetDao = daoSession.getPxMethodInfoDao();
            PxMethodInfo dbMethodInfoNew = targetDao.load(__key);
            synchronized (this) {
                dbMethodInfo = dbMethodInfoNew;
            	dbMethodInfo__resolvedKey = __key;
            }
        }
        return dbMethodInfo;
    }

    public void setDbMethodInfo(PxMethodInfo dbMethodInfo) {
        synchronized (this) {
            this.dbMethodInfo = dbMethodInfo;
            pxMethodInfoId = dbMethodInfo == null ? null : dbMethodInfo.getId();
            dbMethodInfo__resolvedKey = pxMethodInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxOptReason getDbReason() {
        Long __key = this.pxOptReasonId;
        if (dbReason__resolvedKey == null || !dbReason__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOptReasonDao targetDao = daoSession.getPxOptReasonDao();
            PxOptReason dbReasonNew = targetDao.load(__key);
            synchronized (this) {
                dbReason = dbReasonNew;
            	dbReason__resolvedKey = __key;
            }
        }
        return dbReason;
    }

    public void setDbReason(PxOptReason dbReason) {
        synchronized (this) {
            this.dbReason = dbReason;
            pxOptReasonId = dbReason == null ? null : dbReason.getId();
            dbReason__resolvedKey = pxOptReasonId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxOrderDetails> getDbDetailsInCombo() {
        if (dbDetailsInCombo == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderDetailsDao targetDao = daoSession.getPxOrderDetailsDao();
            List<PxOrderDetails> dbDetailsInComboNew = targetDao._queryPxOrderDetails_DbDetailsInCombo(id);
            synchronized (this) {
                if(dbDetailsInCombo == null) {
                    dbDetailsInCombo = dbDetailsInComboNew;
                }
            }
        }
        return dbDetailsInCombo;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbDetailsInCombo() {
        dbDetailsInCombo = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

  /**
   * Get and Set
   */

  public boolean isDiscountChecked() {
    return isDiscountChecked;
  }

  public void setIsDiscountChecked(boolean isDiscountChecked) {
    this.isDiscountChecked = isDiscountChecked;
  }

  public boolean isOriginPrice() {//判断是否经过打折
    return discountRate.doubleValue() == 100.0;
  }

  public PxProductInfo getProductInfo() {
    return mProductInfo;
  }

  public void setProductInfo(PxProductInfo productInfo) {
    mProductInfo = productInfo;
  }

  /**
   * 设置当前折扣率
   */
  public void setCurrentDiscRate() {
    this.setDiscountRate(100);
  }

  /**
   * 获取应收金额
   */
  public double getReceivablePrice() {
    //如果为会员，则应收为会员价 x 折扣率
    PxOrderInfo orderInfo = DaoServiceUtil.getOrderInfoService()
        .queryBuilder()
        .where(PxOrderInfoDao.Properties.Id.eq(this.getDbOrder().getId()))
        .unique();
    if (orderInfo.getUseVipCard().equals(PxOrderInfo.USE_VIP_CARD_TRUE)) {
      String number = NumberFormatUtils.formatFloatNumber(
          getVipPrice() * ((double) this.getDiscountRate() / 100));
      return Double.parseDouble(number);
    } else {//否则,应收为 价格 x 折扣率
      String number =
          NumberFormatUtils.formatFloatNumber(getPrice() * ((double) this.getDiscountRate() / 100));
      return Double.parseDouble(number);
    }
  }

  /**
   * 获取优惠金额
   */
  public double getDiscPrice() {
    //如果为会员
    PxOrderInfo orderInfo = DaoServiceUtil.getOrderInfoService()
        .queryBuilder()
        .where(PxOrderInfoDao.Properties.Id.eq(this.getDbOrder().getId()))
        .unique();
    if (orderInfo.getUseVipCard().equals(PxOrderInfo.USE_VIP_CARD_TRUE)) {
      String number = NumberFormatUtils.formatFloatNumber(
          ((this.getPrice() - this.getVipPrice() * (double) this.getDiscountRate() / 100)));
      return Double.parseDouble(number);
    } else {
      String number = NumberFormatUtils.formatFloatNumber(
          this.getPrice() * (1 - (double) this.getDiscountRate() / 100));
      return Double.parseDouble(number);
    }
  }

  /**
   * 获取打印价格
   */
  public double getPrintPrice() {
    double printPrice = 0.0;
    PxOrderInfo orderInfo = DaoServiceUtil.getOrderInfoService()
        .queryBuilder()
        .where(PxOrderInfoDao.Properties.Id.eq(this.getDbOrder().getId()))
        .unique();
    if (orderInfo.getUseVipCard().equals(PxOrderInfo.USE_VIP_CARD_TRUE)) {
      if (this.getDbProduct().getMultipleUnit().equals(PxProductInfo.IS_TWO_UNIT_TURE)) {
        printPrice =
            (this.getUnitVipPrice() * this.getMultipleUnitNumber()) * this.getDiscountRate() / 100;
      } else {
        printPrice = (this.getUnitVipPrice() * this.getNum()) * this.getDiscountRate() / 100;
      }
    } else {
      if (this.getDbProduct().getMultipleUnit().equals(PxProductInfo.IS_TWO_UNIT_TURE)) {
        printPrice =
            (this.getUnitPrice() * this.getMultipleUnitNumber()) * this.getDiscountRate() / 100;
      } else {
        printPrice = (this.getUnitPrice() * this.getNum()) * this.getDiscountRate() / 100;
      }
    }
    return printPrice;
  }

  /**
   * MakePrintDetails所需字段
   */
  public PxProductInfo getPrintProd() {
    return mPrintProd;
  }

  public void setPrintProd(PxProductInfo printProd) {
    mPrintProd = printProd;
  }

  public PxOrderInfo getPrintOrder() {
    return mPrintOrder;
  }

  public void setPrintOrder(PxOrderInfo printOrder) {
    mPrintOrder = printOrder;
  }

  public PxFormatInfo getPrintFormat() {
    return mPrintFormat;
  }

  public void setPrintFormat(PxFormatInfo printFormat) {
    mPrintFormat = printFormat;
  }

  public PxMethodInfo getPrintMethod() {
    return mPrintMethod;
  }

  public void setPrintMethod(PxMethodInfo printMethod) {
    mPrintMethod = printMethod;
  }

  public PxOptReason getPrintReason() {
    return mPrintReason;
  }

  public void setPrintReason(PxOptReason printReason) {
    mPrintReason = printReason;
  }

  public PackagePrintDetails getPackagePrintDetails() {
    return mPackagePrintDetails;
  }

  public void setPackagePrintDetails(PackagePrintDetails packagePrintDetails) {
    mPackagePrintDetails = packagePrintDetails;
  }



  @Override public String toString() {
    return "PxOrderDetails{" + "price=" + price + ", vipPrice=" + vipPrice + ", num=" + num
        + ", status='" + status + '\'' + ", discountRate=" + discountRate + ", isDiscount='"
        + isDiscount + '\'' + ", orderStatus='" + orderStatus + '\'' + ", multipleUnitNumber="
        + multipleUnitNumber + ", isServing=" + isServing + ", finalPrice=" + finalPrice
        + ", inCombo='" + inCombo + '\'' + ", isComboDetails='" + isComboDetails + '\''
        + ", isComboTemporaryDetails=" + isComboTemporaryDetails + ", chooseType='" + chooseType
        + '\'' + ", isGift='" + isGift + '\'' + ", remarks='" + remarks + '\'' + ", unitPrice="
        + unitPrice + ", unitVipPrice=" + unitVipPrice + ", refundNum=" + refundNum
        + ", refundMultNum=" + refundMultNum + ", pxOrderInfoId=" + pxOrderInfoId
        + ", pxProductInfoId=" + pxProductInfoId + ", pxComboDetailsId=" + pxComboDetailsId
        + ", pxFormatInfoId=" + pxFormatInfoId + ", pxMethodInfoId=" + pxMethodInfoId
        + ", pxOptReasonId=" + pxOptReasonId + '}';
  }
    // KEEP METHODS END

}
