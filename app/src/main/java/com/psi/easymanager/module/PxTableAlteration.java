package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxTableAlterationDao;
import com.psi.easymanager.dao.PxTableInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END
/**
 * Entity mapped to table "TableAlteration".
 */
public class PxTableAlteration implements java.io.Serializable {

     @Expose
    private Long id;
    /**
     * 操作时间
     */
     @Expose
    private java.util.Date operateTime;
    /**
     * 类型 0:移动 1：合并
     */
     @Expose
    private String type;
    /**
     * 已打印
     */
     @Expose
    private Boolean isPrinted;
    /**
     * 是否清空
     */
     @Expose
    private Boolean isClear;
    private Long pxOrderInfoId;
    private Long pxOriginalTableId;
    private Long pxTargetTableId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxTableAlterationDao myDao;

    private PxOrderInfo dbOrder;
    private Long dbOrder__resolvedKey;

    private PxTableInfo dbOriginalTable;
    private Long dbOriginalTable__resolvedKey;

    private PxTableInfo dbTargetTable;
    private Long dbTargetTable__resolvedKey;


    // KEEP FIELDS - put your custom fields here
  public static final String TYPE_MOVE = "0";
  public static final String TYPE_MERGE = "1";
    // KEEP FIELDS END

    public PxTableAlteration() {
    }

    public PxTableAlteration(Long id) {
        this.id = id;
    }

    public PxTableAlteration(Long id, java.util.Date operateTime, String type, Boolean isPrinted, Boolean isClear, Long pxOrderInfoId, Long pxOriginalTableId, Long pxTargetTableId) {
        this.id = id;
        this.operateTime = operateTime;
        this.type = type;
        this.isPrinted = isPrinted;
        this.isClear = isClear;
        this.pxOrderInfoId = pxOrderInfoId;
        this.pxOriginalTableId = pxOriginalTableId;
        this.pxTargetTableId = pxTargetTableId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxTableAlterationDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getOperateTime() {
        return operateTime;
    }

    public void setOperateTime(java.util.Date operateTime) {
        this.operateTime = operateTime;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Boolean getIsPrinted() {
        return isPrinted;
    }

    public void setIsPrinted(Boolean isPrinted) {
        this.isPrinted = isPrinted;
    }

    public Boolean getIsClear() {
        return isClear;
    }

    public void setIsClear(Boolean isClear) {
        this.isClear = isClear;
    }

    public Long getPxOrderInfoId() {
        return pxOrderInfoId;
    }

    public void setPxOrderInfoId(Long pxOrderInfoId) {
        this.pxOrderInfoId = pxOrderInfoId;
    }

    public Long getPxOriginalTableId() {
        return pxOriginalTableId;
    }

    public void setPxOriginalTableId(Long pxOriginalTableId) {
        this.pxOriginalTableId = pxOriginalTableId;
    }

    public Long getPxTargetTableId() {
        return pxTargetTableId;
    }

    public void setPxTargetTableId(Long pxTargetTableId) {
        this.pxTargetTableId = pxTargetTableId;
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderInfo getDbOrder() {
        Long __key = this.pxOrderInfoId;
        if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
            PxOrderInfo dbOrderNew = targetDao.load(__key);
            synchronized (this) {
                dbOrder = dbOrderNew;
            	dbOrder__resolvedKey = __key;
            }
        }
        return dbOrder;
    }

    public void setDbOrder(PxOrderInfo dbOrder) {
        synchronized (this) {
            this.dbOrder = dbOrder;
            pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
            dbOrder__resolvedKey = pxOrderInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxTableInfo getDbOriginalTable() {
        Long __key = this.pxOriginalTableId;
        if (dbOriginalTable__resolvedKey == null || !dbOriginalTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxTableInfoDao targetDao = daoSession.getPxTableInfoDao();
            PxTableInfo dbOriginalTableNew = targetDao.load(__key);
            synchronized (this) {
                dbOriginalTable = dbOriginalTableNew;
            	dbOriginalTable__resolvedKey = __key;
            }
        }
        return dbOriginalTable;
    }

    public void setDbOriginalTable(PxTableInfo dbOriginalTable) {
        synchronized (this) {
            this.dbOriginalTable = dbOriginalTable;
            pxOriginalTableId = dbOriginalTable == null ? null : dbOriginalTable.getId();
            dbOriginalTable__resolvedKey = pxOriginalTableId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxTableInfo getDbTargetTable() {
        Long __key = this.pxTargetTableId;
        if (dbTargetTable__resolvedKey == null || !dbTargetTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxTableInfoDao targetDao = daoSession.getPxTableInfoDao();
            PxTableInfo dbTargetTableNew = targetDao.load(__key);
            synchronized (this) {
                dbTargetTable = dbTargetTableNew;
            	dbTargetTable__resolvedKey = __key;
            }
        }
        return dbTargetTable;
    }

    public void setDbTargetTable(PxTableInfo dbTargetTable) {
        synchronized (this) {
            this.dbTargetTable = dbTargetTable;
            pxTargetTableId = dbTargetTable == null ? null : dbTargetTable.getId();
            dbTargetTable__resolvedKey = pxTargetTableId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
