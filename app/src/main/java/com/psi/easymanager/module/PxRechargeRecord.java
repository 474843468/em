package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxRechargePlanDao;
import com.psi.easymanager.dao.PxRechargeRecordDao;
import com.psi.easymanager.dao.PxVipInfoDao;
import com.psi.easymanager.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
// KEEP INCLUDES END

/**
 * 会员充值记录
 */
public class PxRechargeRecord implements java.io.Serializable {

    private Long id;
    /**
     * 积分
     */
     @Expose
    private Integer score;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 充值金额
     */
     @Expose
    private Double money;
    /**
     * 赠送金额
     */
     @Expose
    private Double giving;
    /**
     * 是否上传
     */
     @Expose
    private Boolean isUpLoad;
    /**
     * 虚拟删除 0：正常 1：删除 2：审核
     */
     @Expose
    private String delFlag;
    /**
     * 充值时间
     */
     @SerializedName("updateDate") @Expose
    private java.util.Date rechargeTime;
    private long userId;
    /**
     * 交接班状态(0:未交接 1:冻结 2:已交接 )
     */
     @Expose
    private String shiftChangeType;
    /**
     * (充值类型 0:现金)
     */
     @Expose
    private String rechargeType;
    private long pxVipInfoId;
    private long pxRechargePlanId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxRechargeRecordDao myDao;

    private User dbUser;
    private Long dbUser__resolvedKey;

    private PxVipInfo dbVipInfo;
    private Long dbVipInfo__resolvedKey;

    private PxRechargePlan dbRechargePlan;
    private Long dbRechargePlan__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    //交接班状态(0:未交接 1:冻结 2:已交接 )
    public static final String SHIFT_CHANGE_UNHAND = "0";
    public static final String SHIFT_CHANGE_FREEZE = "1";
    public static final String SHIFT_CHANGE_HANDED = "2";
    // KEEP FIELDS END

    public PxRechargeRecord() {
    }

    public PxRechargeRecord(Long id) {
        this.id = id;
    }

    public PxRechargeRecord(Long id, Integer score, String objectId, Double money, Double giving, Boolean isUpLoad, String delFlag, java.util.Date rechargeTime, long userId, String shiftChangeType, String rechargeType, long pxVipInfoId, long pxRechargePlanId) {
        this.id = id;
        this.score = score;
        this.objectId = objectId;
        this.money = money;
        this.giving = giving;
        this.isUpLoad = isUpLoad;
        this.delFlag = delFlag;
        this.rechargeTime = rechargeTime;
        this.userId = userId;
        this.shiftChangeType = shiftChangeType;
        this.rechargeType = rechargeType;
        this.pxVipInfoId = pxVipInfoId;
        this.pxRechargePlanId = pxRechargePlanId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxRechargeRecordDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getScore() {
        return score;
    }

    public void setScore(Integer score) {
        this.score = score;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Double getMoney() {
        return money;
    }

    public void setMoney(Double money) {
        this.money = money;
    }

    public Double getGiving() {
        return giving;
    }

    public void setGiving(Double giving) {
        this.giving = giving;
    }

    public Boolean getIsUpLoad() {
        return isUpLoad;
    }

    public void setIsUpLoad(Boolean isUpLoad) {
        this.isUpLoad = isUpLoad;
    }

    public String getDelFlag() {
        return delFlag;
    }

    public void setDelFlag(String delFlag) {
        this.delFlag = delFlag;
    }

    public java.util.Date getRechargeTime() {
        return rechargeTime;
    }

    public void setRechargeTime(java.util.Date rechargeTime) {
        this.rechargeTime = rechargeTime;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public String getShiftChangeType() {
        return shiftChangeType;
    }

    public void setShiftChangeType(String shiftChangeType) {
        this.shiftChangeType = shiftChangeType;
    }

    public String getRechargeType() {
        return rechargeType;
    }

    public void setRechargeType(String rechargeType) {
        this.rechargeType = rechargeType;
    }

    public long getPxVipInfoId() {
        return pxVipInfoId;
    }

    public void setPxVipInfoId(long pxVipInfoId) {
        this.pxVipInfoId = pxVipInfoId;
    }

    public long getPxRechargePlanId() {
        return pxRechargePlanId;
    }

    public void setPxRechargePlanId(long pxRechargePlanId) {
        this.pxRechargePlanId = pxRechargePlanId;
    }

    /** To-one relationship, resolved on first access. */
    public User getDbUser() {
        long __key = this.userId;
        if (dbUser__resolvedKey == null || !dbUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbUserNew = targetDao.load(__key);
            synchronized (this) {
                dbUser = dbUserNew;
            	dbUser__resolvedKey = __key;
            }
        }
        return dbUser;
    }

    public void setDbUser(User dbUser) {
        if (dbUser == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbUser = dbUser;
            userId = dbUser.getId();
            dbUser__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxVipInfo getDbVipInfo() {
        long __key = this.pxVipInfoId;
        if (dbVipInfo__resolvedKey == null || !dbVipInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxVipInfoDao targetDao = daoSession.getPxVipInfoDao();
            PxVipInfo dbVipInfoNew = targetDao.load(__key);
            synchronized (this) {
                dbVipInfo = dbVipInfoNew;
            	dbVipInfo__resolvedKey = __key;
            }
        }
        return dbVipInfo;
    }

    public void setDbVipInfo(PxVipInfo dbVipInfo) {
        if (dbVipInfo == null) {
            throw new DaoException("To-one property 'pxVipInfoId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbVipInfo = dbVipInfo;
            pxVipInfoId = dbVipInfo.getId();
            dbVipInfo__resolvedKey = pxVipInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxRechargePlan getDbRechargePlan() {
        long __key = this.pxRechargePlanId;
        if (dbRechargePlan__resolvedKey == null || !dbRechargePlan__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxRechargePlanDao targetDao = daoSession.getPxRechargePlanDao();
            PxRechargePlan dbRechargePlanNew = targetDao.load(__key);
            synchronized (this) {
                dbRechargePlan = dbRechargePlanNew;
            	dbRechargePlan__resolvedKey = __key;
            }
        }
        return dbRechargePlan;
    }

    public void setDbRechargePlan(PxRechargePlan dbRechargePlan) {
        if (dbRechargePlan == null) {
            throw new DaoException("To-one property 'pxRechargePlanId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbRechargePlan = dbRechargePlan;
            pxRechargePlanId = dbRechargePlan.getId();
            dbRechargePlan__resolvedKey = pxRechargePlanId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
