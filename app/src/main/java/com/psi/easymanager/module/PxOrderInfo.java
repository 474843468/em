package com.psi.easymanager.module;

import java.util.List;
import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxExtraDetailsDao;
import com.psi.easymanager.dao.PxOrderDetailsDao;
import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxPayInfoDao;
import com.psi.easymanager.dao.PxPromotioInfoDao;
import com.psi.easymanager.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import com.psi.easymanager.dao.dbUtil.DaoServiceUtil;
// KEEP INCLUDES END
/**
 * Entity mapped to table "OrderInfo".
 */
public class PxOrderInfo implements java.io.Serializable {

    private Long id;
    /**
     * 对应服务器id
     */
     @SerializedName("id") @Expose
    private String objectId;
    /**
     * 订单总价
     */
     @Expose
    private Double totalPrice;
    /**
     * 应收款
     */
     @Expose
    private Double accountReceivable;
    /**
     * 实收款
     */
     @Expose
    private Double realPrice;
    /**
     * 总的找零
     */
     @Expose
    private Double totalChange;
    /**
     * 优惠金额
     */
     @Expose
    private Double discountPrice;
    /**
     * 支付方式(0:现金 1:刷卡 2：会员卡 3:其他)
     */
     @Expose
    private String payType;
    /**
     * 订单状态(0:未结账 1：结账 2:撤单)
     */
     @Expose
    private String status;
    /**
     * 是否抹零（0：是 1：否  2:请选择
     */
     @Expose
    private String tail;
    /**
     * 抹零金额
     */
     @Expose
    private Double tailMoney;
    /**
     * 是否刷会员卡(0：不刷 1：手机 2实体卡)
     */
     @Expose
    private String useVipCard;
    /**
     * App使用，实际用餐人数.
     */
     @Expose
    private Integer actualPeopleNumber;
    /**
     * App使用,开始时间
     */
     @Expose
    private java.util.Date startTime;
    /**
     * App使用，结束时间
     */
     @Expose
    private java.util.Date endTime;
    /**
     * 公司名称
     */
     @Expose
    private String officeName;
    /**
     * 订单类型 桌位单或零售单
     */
     @Expose
    private String orderInfoType;
    /**
     * App使用，附加费类型
     */
     @Expose
    private String extraType;
    /**
     * 上次换桌时间,用于计算附加费
     */
     @Expose
    private java.util.Date lastMoveTableTime;
    /**
     * 订单号
     */
     @Expose
    private String orderNo;
    /**
     * 订单请求流水号
     */
     @Expose
    private String orderReqNo;
    /**
     * 订单是否已上传(用于上传营业数据)
     */
     @Expose
    private Boolean isUpload;
    /**
     * 附加费金额
     */
     @Expose
    private Double extraMoney;
    /**
     * 补足金额
     */
     @Expose
    private Double complementMoney;
    /**
     * 交接班状态(0:未交接 1:冻结 2:已交接 )
     */
     @Expose
    private String shiftChangeType;
    /**
     * 最终区域(0:大厅 1:包厢)
     */
     @Expose
    private String finalArea;
    /**
     * 订单是否锁定(true:锁定 false:不锁定)-针对在线支付
     */
     @Expose
    private Boolean isLock;
    /**
     * 备注
     */
     @Expose
    private String remarks;
    /**
     * 优惠券金额
     */
     @Expose
    private Double voucherMoney;
    /**
     * 是否反结账(0:未反结账 1:反结账)
     */
     @Expose
    private String isReversed;
    /**
     * 反结账的订单是否上传
     */
     @Expose
    private Boolean isUploadReverse;
    /**
     * 订单类型(0:普通订单 1:预订单)
     */
     @Expose
    private String isReserveOrder;
    /**
     * 联系人
     */
     @Expose
    private String linkMan;
    /**
     * 联系电话
     */
     @Expose
    private String contactPhone;
    /**
     * 用餐时间
     */
     @Expose
    private java.util.Date diningTime;
    /**
     * 预订单状态 0:已预定、1:已到达(只针对预订单状态)
     */
     @Expose
    private String reserveState;
    /**
     * 支付类优惠
     */
     @Expose
    private Double payPrivilege;
    /**
     * 订单类型 (0:默认订单 1：微信点餐(到店) 2：微信点菜(外卖))
     */
     @Expose
    private String type;
    private Long pxExtraDetailsId;
    private Long pxPromotioId;
    private long userId;
    private long waiterId;
    private long checkOutUserId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxOrderInfoDao myDao;

    private PxExtraDetails dbCurrentExtra;
    private Long dbCurrentExtra__resolvedKey;

    private PxPromotioInfo dbPromotioInfo;
    private Long dbPromotioInfo__resolvedKey;

    private User dbUser;
    private Long dbUser__resolvedKey;

    private User dbWaiter;
    private Long dbWaiter__resolvedKey;

    private User dbCheckOutUser;
    private Long dbCheckOutUser__resolvedKey;

    private List<PxOrderDetails> dbOrderDetailsList;
    private List<PxExtraDetails> dbExtraDetailsList;
    private List<PxPayInfo> dbPayInfoList;

    // KEEP FIELDS - put your custom fields here
  public static final String STATUS_UNFINISH = "0";
  public static final String STATUS_FINISH = "1";
  public static final String STATUS_CANCEL = "2";

  public static final String ORDER_INFO_TYPE_TABLE = "1";//桌位单
  public static final String ORDER_INFO_TYPE_RETAIL = "2";//零售单

  public static final String EXTRA_TYPE_FIXED = "0";
  public static final String EXTRA_TYPE_PEOPLE = "1";
  public static final String EXTAR_TYPE_TIME = "2";
  public static final String EXTRA_TYPE_NO = "3";

  public static final String USE_VIP_CARD_FALSE = "0";//不是会员
  public static final String USE_VIP_CARD_TRUE = "1";//手机号

  public static final String TAIL_FALSE = "1";
  public static final String TAIL_TRUE = "0";

  public static final String SHIFT_CHANGE_UNHAND = "0";//未交接
  public static final String SHIFT_CHANGE_FREEZE = "1";//冻结
  public static final String SHIFT_CHANGE_HANDED = "2";//已交接

  //最终区域  大厅、包厢、自定义
  public static final String FINAL_AREA_HALL = "0";//最终区域 大厅
  public static final String FINAL_AREA_PARLOR = "1";//最终区域 包间

  public static final String REVERSE_FALSE = "0";//未反结账
  public static final String REVERSE_TRUE = "1";//反结账

  //用于向服务器上传完结订单
  private String currentCashierId;//该订单收银员id,上传订单时使用
  private String currentWaiterId;//该订单服务员id,上传订单时使用

  //是否为预定单(0:普通订单 1:预订单)
  public static final String IS_REVERSE_ORDER_FALSE = "0";
  public static final String IS_REVERSE_ORDER_TRUE = "1";
  //预订单状态 0:已预定、1:已到达
  public static final String RESERVE_STATE_RESERVE = "0";
  public static final String RESERVE_STATE_REACH = "1";

  private String mPaymentRecevied;//支付方式实收金额

  //订单类型 (0:默认订单 1：微信点餐(到店) 2：微信点菜(外卖))

  public static String TYPE_DEFAULT = "0";
  public static String TYPE_WEIXIN_TO_SHOP = "1";
  public static String TYPE_WEIXIN_TAKE_OUT = "2";
    // KEEP FIELDS END

    public PxOrderInfo() {
    }

    public PxOrderInfo(Long id) {
        this.id = id;
    }

    public PxOrderInfo(Long id, String objectId, Double totalPrice, Double accountReceivable, Double realPrice, Double totalChange, Double discountPrice, String payType, String status, String tail, Double tailMoney, String useVipCard, Integer actualPeopleNumber, java.util.Date startTime, java.util.Date endTime, String officeName, String orderInfoType, String extraType, java.util.Date lastMoveTableTime, String orderNo, String orderReqNo, Boolean isUpload, Double extraMoney, Double complementMoney, String shiftChangeType, String finalArea, Boolean isLock, String remarks, Double voucherMoney, String isReversed, Boolean isUploadReverse, String isReserveOrder, String linkMan, String contactPhone, java.util.Date diningTime, String reserveState, Double payPrivilege, String type, Long pxExtraDetailsId, Long pxPromotioId, long userId, long waiterId, long checkOutUserId) {
        this.id = id;
        this.objectId = objectId;
        this.totalPrice = totalPrice;
        this.accountReceivable = accountReceivable;
        this.realPrice = realPrice;
        this.totalChange = totalChange;
        this.discountPrice = discountPrice;
        this.payType = payType;
        this.status = status;
        this.tail = tail;
        this.tailMoney = tailMoney;
        this.useVipCard = useVipCard;
        this.actualPeopleNumber = actualPeopleNumber;
        this.startTime = startTime;
        this.endTime = endTime;
        this.officeName = officeName;
        this.orderInfoType = orderInfoType;
        this.extraType = extraType;
        this.lastMoveTableTime = lastMoveTableTime;
        this.orderNo = orderNo;
        this.orderReqNo = orderReqNo;
        this.isUpload = isUpload;
        this.extraMoney = extraMoney;
        this.complementMoney = complementMoney;
        this.shiftChangeType = shiftChangeType;
        this.finalArea = finalArea;
        this.isLock = isLock;
        this.remarks = remarks;
        this.voucherMoney = voucherMoney;
        this.isReversed = isReversed;
        this.isUploadReverse = isUploadReverse;
        this.isReserveOrder = isReserveOrder;
        this.linkMan = linkMan;
        this.contactPhone = contactPhone;
        this.diningTime = diningTime;
        this.reserveState = reserveState;
        this.payPrivilege = payPrivilege;
        this.type = type;
        this.pxExtraDetailsId = pxExtraDetailsId;
        this.pxPromotioId = pxPromotioId;
        this.userId = userId;
        this.waiterId = waiterId;
        this.checkOutUserId = checkOutUserId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxOrderInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getObjectId() {
        return objectId;
    }

    public void setObjectId(String objectId) {
        this.objectId = objectId;
    }

    public Double getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(Double totalPrice) {
        this.totalPrice = totalPrice;
    }

    public Double getAccountReceivable() {
        return accountReceivable;
    }

    public void setAccountReceivable(Double accountReceivable) {
        this.accountReceivable = accountReceivable;
    }

    public Double getRealPrice() {
        return realPrice;
    }

    public void setRealPrice(Double realPrice) {
        this.realPrice = realPrice;
    }

    public Double getTotalChange() {
        return totalChange;
    }

    public void setTotalChange(Double totalChange) {
        this.totalChange = totalChange;
    }

    public Double getDiscountPrice() {
        return discountPrice;
    }

    public void setDiscountPrice(Double discountPrice) {
        this.discountPrice = discountPrice;
    }

    public String getPayType() {
        return payType;
    }

    public void setPayType(String payType) {
        this.payType = payType;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getTail() {
        return tail;
    }

    public void setTail(String tail) {
        this.tail = tail;
    }

    public Double getTailMoney() {
        return tailMoney;
    }

    public void setTailMoney(Double tailMoney) {
        this.tailMoney = tailMoney;
    }

    public String getUseVipCard() {
        return useVipCard;
    }

    public void setUseVipCard(String useVipCard) {
        this.useVipCard = useVipCard;
    }

    public Integer getActualPeopleNumber() {
        return actualPeopleNumber;
    }

    public void setActualPeopleNumber(Integer actualPeopleNumber) {
        this.actualPeopleNumber = actualPeopleNumber;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getEndTime() {
        return endTime;
    }

    public void setEndTime(java.util.Date endTime) {
        this.endTime = endTime;
    }

    public String getOfficeName() {
        return officeName;
    }

    public void setOfficeName(String officeName) {
        this.officeName = officeName;
    }

    public String getOrderInfoType() {
        return orderInfoType;
    }

    public void setOrderInfoType(String orderInfoType) {
        this.orderInfoType = orderInfoType;
    }

    public String getExtraType() {
        return extraType;
    }

    public void setExtraType(String extraType) {
        this.extraType = extraType;
    }

    public java.util.Date getLastMoveTableTime() {
        return lastMoveTableTime;
    }

    public void setLastMoveTableTime(java.util.Date lastMoveTableTime) {
        this.lastMoveTableTime = lastMoveTableTime;
    }

    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(String orderNo) {
        this.orderNo = orderNo;
    }

    public String getOrderReqNo() {
        return orderReqNo;
    }

    public void setOrderReqNo(String orderReqNo) {
        this.orderReqNo = orderReqNo;
    }

    public Boolean getIsUpload() {
        return isUpload;
    }

    public void setIsUpload(Boolean isUpload) {
        this.isUpload = isUpload;
    }

    public Double getExtraMoney() {
        return extraMoney;
    }

    public void setExtraMoney(Double extraMoney) {
        this.extraMoney = extraMoney;
    }

    public Double getComplementMoney() {
        return complementMoney;
    }

    public void setComplementMoney(Double complementMoney) {
        this.complementMoney = complementMoney;
    }

    public String getShiftChangeType() {
        return shiftChangeType;
    }

    public void setShiftChangeType(String shiftChangeType) {
        this.shiftChangeType = shiftChangeType;
    }

    public String getFinalArea() {
        return finalArea;
    }

    public void setFinalArea(String finalArea) {
        this.finalArea = finalArea;
    }

    public Boolean getIsLock() {
        return isLock;
    }

    public void setIsLock(Boolean isLock) {
        this.isLock = isLock;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    public Double getVoucherMoney() {
        return voucherMoney;
    }

    public void setVoucherMoney(Double voucherMoney) {
        this.voucherMoney = voucherMoney;
    }

    public String getIsReversed() {
        return isReversed;
    }

    public void setIsReversed(String isReversed) {
        this.isReversed = isReversed;
    }

    public Boolean getIsUploadReverse() {
        return isUploadReverse;
    }

    public void setIsUploadReverse(Boolean isUploadReverse) {
        this.isUploadReverse = isUploadReverse;
    }

    public String getIsReserveOrder() {
        return isReserveOrder;
    }

    public void setIsReserveOrder(String isReserveOrder) {
        this.isReserveOrder = isReserveOrder;
    }

    public String getLinkMan() {
        return linkMan;
    }

    public void setLinkMan(String linkMan) {
        this.linkMan = linkMan;
    }

    public String getContactPhone() {
        return contactPhone;
    }

    public void setContactPhone(String contactPhone) {
        this.contactPhone = contactPhone;
    }

    public java.util.Date getDiningTime() {
        return diningTime;
    }

    public void setDiningTime(java.util.Date diningTime) {
        this.diningTime = diningTime;
    }

    public String getReserveState() {
        return reserveState;
    }

    public void setReserveState(String reserveState) {
        this.reserveState = reserveState;
    }

    public Double getPayPrivilege() {
        return payPrivilege;
    }

    public void setPayPrivilege(Double payPrivilege) {
        this.payPrivilege = payPrivilege;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Long getPxExtraDetailsId() {
        return pxExtraDetailsId;
    }

    public void setPxExtraDetailsId(Long pxExtraDetailsId) {
        this.pxExtraDetailsId = pxExtraDetailsId;
    }

    public Long getPxPromotioId() {
        return pxPromotioId;
    }

    public void setPxPromotioId(Long pxPromotioId) {
        this.pxPromotioId = pxPromotioId;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public long getWaiterId() {
        return waiterId;
    }

    public void setWaiterId(long waiterId) {
        this.waiterId = waiterId;
    }

    public long getCheckOutUserId() {
        return checkOutUserId;
    }

    public void setCheckOutUserId(long checkOutUserId) {
        this.checkOutUserId = checkOutUserId;
    }

    /** To-one relationship, resolved on first access. */
    public PxExtraDetails getDbCurrentExtra() {
        Long __key = this.pxExtraDetailsId;
        if (dbCurrentExtra__resolvedKey == null || !dbCurrentExtra__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxExtraDetailsDao targetDao = daoSession.getPxExtraDetailsDao();
            PxExtraDetails dbCurrentExtraNew = targetDao.load(__key);
            synchronized (this) {
                dbCurrentExtra = dbCurrentExtraNew;
            	dbCurrentExtra__resolvedKey = __key;
            }
        }
        return dbCurrentExtra;
    }

    public void setDbCurrentExtra(PxExtraDetails dbCurrentExtra) {
        synchronized (this) {
            this.dbCurrentExtra = dbCurrentExtra;
            pxExtraDetailsId = dbCurrentExtra == null ? null : dbCurrentExtra.getId();
            dbCurrentExtra__resolvedKey = pxExtraDetailsId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxPromotioInfo getDbPromotioInfo() {
        Long __key = this.pxPromotioId;
        if (dbPromotioInfo__resolvedKey == null || !dbPromotioInfo__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPromotioInfoDao targetDao = daoSession.getPxPromotioInfoDao();
            PxPromotioInfo dbPromotioInfoNew = targetDao.load(__key);
            synchronized (this) {
                dbPromotioInfo = dbPromotioInfoNew;
            	dbPromotioInfo__resolvedKey = __key;
            }
        }
        return dbPromotioInfo;
    }

    public void setDbPromotioInfo(PxPromotioInfo dbPromotioInfo) {
        synchronized (this) {
            this.dbPromotioInfo = dbPromotioInfo;
            pxPromotioId = dbPromotioInfo == null ? null : dbPromotioInfo.getId();
            dbPromotioInfo__resolvedKey = pxPromotioId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getDbUser() {
        long __key = this.userId;
        if (dbUser__resolvedKey == null || !dbUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbUserNew = targetDao.load(__key);
            synchronized (this) {
                dbUser = dbUserNew;
            	dbUser__resolvedKey = __key;
            }
        }
        return dbUser;
    }

    public void setDbUser(User dbUser) {
        if (dbUser == null) {
            throw new DaoException("To-one property 'userId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbUser = dbUser;
            userId = dbUser.getId();
            dbUser__resolvedKey = userId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getDbWaiter() {
        long __key = this.waiterId;
        if (dbWaiter__resolvedKey == null || !dbWaiter__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbWaiterNew = targetDao.load(__key);
            synchronized (this) {
                dbWaiter = dbWaiterNew;
            	dbWaiter__resolvedKey = __key;
            }
        }
        return dbWaiter;
    }

    public void setDbWaiter(User dbWaiter) {
        if (dbWaiter == null) {
            throw new DaoException("To-one property 'waiterId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbWaiter = dbWaiter;
            waiterId = dbWaiter.getId();
            dbWaiter__resolvedKey = waiterId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getDbCheckOutUser() {
        long __key = this.checkOutUserId;
        if (dbCheckOutUser__resolvedKey == null || !dbCheckOutUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User dbCheckOutUserNew = targetDao.load(__key);
            synchronized (this) {
                dbCheckOutUser = dbCheckOutUserNew;
            	dbCheckOutUser__resolvedKey = __key;
            }
        }
        return dbCheckOutUser;
    }

    public void setDbCheckOutUser(User dbCheckOutUser) {
        if (dbCheckOutUser == null) {
            throw new DaoException("To-one property 'checkOutUserId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dbCheckOutUser = dbCheckOutUser;
            checkOutUserId = dbCheckOutUser.getId();
            dbCheckOutUser__resolvedKey = checkOutUserId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxOrderDetails> getDbOrderDetailsList() {
        if (dbOrderDetailsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderDetailsDao targetDao = daoSession.getPxOrderDetailsDao();
            List<PxOrderDetails> dbOrderDetailsListNew = targetDao._queryPxOrderInfo_DbOrderDetailsList(id);
            synchronized (this) {
                if(dbOrderDetailsList == null) {
                    dbOrderDetailsList = dbOrderDetailsListNew;
                }
            }
        }
        return dbOrderDetailsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbOrderDetailsList() {
        dbOrderDetailsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxExtraDetails> getDbExtraDetailsList() {
        if (dbExtraDetailsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxExtraDetailsDao targetDao = daoSession.getPxExtraDetailsDao();
            List<PxExtraDetails> dbExtraDetailsListNew = targetDao._queryPxOrderInfo_DbExtraDetailsList(id);
            synchronized (this) {
                if(dbExtraDetailsList == null) {
                    dbExtraDetailsList = dbExtraDetailsListNew;
                }
            }
        }
        return dbExtraDetailsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbExtraDetailsList() {
        dbExtraDetailsList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PxPayInfo> getDbPayInfoList() {
        if (dbPayInfoList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxPayInfoDao targetDao = daoSession.getPxPayInfoDao();
            List<PxPayInfo> dbPayInfoListNew = targetDao._queryPxOrderInfo_DbPayInfoList(id);
            synchronized (this) {
                if(dbPayInfoList == null) {
                    dbPayInfoList = dbPayInfoListNew;
                }
            }
        }
        return dbPayInfoList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbPayInfoList() {
        dbPayInfoList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

  public String getPaymentRecevied() {
    return mPaymentRecevied;
  }

  public void setPaymentRecevied(String paymentRecevied) {
    mPaymentRecevied = paymentRecevied;
  }

  /**
   * 获取单号
   */
  public String getOrderNumCutOut() {
    if (this.getOrderNo() != null) {
      int length = this.getOrderNo().length();
      return this.getOrderNo().substring(length - 6);
    }
    return "000000";
  }

  public PxPromotioInfo getDbPromotioById() {
    Long pxPromotioId = getPxPromotioId();
    if (pxPromotioId == null) return null;
    return DaoServiceUtil.getPromotionInfoService()
        .queryBuilder()
        .where(PxPromotioInfoDao.Properties.Id.eq(pxPromotioId))
        .unique();
  }
    // KEEP METHODS END

}
