package com.psi.easymanager.module;

import java.util.List;
import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PdConfigRelDao;
import com.psi.easymanager.dao.PrintDetailsCollectDao;
import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxProductConfigPlanDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END

/**
 * 打印汇总类
 */
public class PrintDetailsCollect implements java.io.Serializable {

    private Long id;
    /**
     * 操作时间
     */
     @Expose
    private java.util.Date operateTime;
    /**
     * 是否已打印
     */
     @Expose
    private Boolean isPrint;
    /**
     * 下单类型(0:下单2:退菜)
     */
     @Expose
    private String type;
    private Long pxOrderInfoId;
    private Long dbConfigId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PrintDetailsCollectDao myDao;

    private PxOrderInfo dbOrder;
    private Long dbOrder__resolvedKey;

    private PxProductConfigPlan dbConfig;
    private Long dbConfig__resolvedKey;

    private List<PdConfigRel> dbPdConfigRelList;

    // KEEP FIELDS - put your custom fields here
    public static final String TYPE_ORDER = "0";
    public static final String TYPE_REFUND = "1";
    // KEEP FIELDS END

    public PrintDetailsCollect() {
    }

    public PrintDetailsCollect(Long id) {
        this.id = id;
    }

    public PrintDetailsCollect(Long id, java.util.Date operateTime, Boolean isPrint, String type, Long pxOrderInfoId, Long dbConfigId) {
        this.id = id;
        this.operateTime = operateTime;
        this.isPrint = isPrint;
        this.type = type;
        this.pxOrderInfoId = pxOrderInfoId;
        this.dbConfigId = dbConfigId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPrintDetailsCollectDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getOperateTime() {
        return operateTime;
    }

    public void setOperateTime(java.util.Date operateTime) {
        this.operateTime = operateTime;
    }

    public Boolean getIsPrint() {
        return isPrint;
    }

    public void setIsPrint(Boolean isPrint) {
        this.isPrint = isPrint;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Long getPxOrderInfoId() {
        return pxOrderInfoId;
    }

    public void setPxOrderInfoId(Long pxOrderInfoId) {
        this.pxOrderInfoId = pxOrderInfoId;
    }

    public Long getDbConfigId() {
        return dbConfigId;
    }

    public void setDbConfigId(Long dbConfigId) {
        this.dbConfigId = dbConfigId;
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderInfo getDbOrder() {
        Long __key = this.pxOrderInfoId;
        if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
            PxOrderInfo dbOrderNew = targetDao.load(__key);
            synchronized (this) {
                dbOrder = dbOrderNew;
            	dbOrder__resolvedKey = __key;
            }
        }
        return dbOrder;
    }

    public void setDbOrder(PxOrderInfo dbOrder) {
        synchronized (this) {
            this.dbOrder = dbOrder;
            pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
            dbOrder__resolvedKey = pxOrderInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxProductConfigPlan getDbConfig() {
        Long __key = this.dbConfigId;
        if (dbConfig__resolvedKey == null || !dbConfig__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxProductConfigPlanDao targetDao = daoSession.getPxProductConfigPlanDao();
            PxProductConfigPlan dbConfigNew = targetDao.load(__key);
            synchronized (this) {
                dbConfig = dbConfigNew;
            	dbConfig__resolvedKey = __key;
            }
        }
        return dbConfig;
    }

    public void setDbConfig(PxProductConfigPlan dbConfig) {
        synchronized (this) {
            this.dbConfig = dbConfig;
            dbConfigId = dbConfig == null ? null : dbConfig.getId();
            dbConfig__resolvedKey = dbConfigId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PdConfigRel> getDbPdConfigRelList() {
        if (dbPdConfigRelList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PdConfigRelDao targetDao = daoSession.getPdConfigRelDao();
            List<PdConfigRel> dbPdConfigRelListNew = targetDao._queryPrintDetailsCollect_DbPdConfigRelList(id);
            synchronized (this) {
                if(dbPdConfigRelList == null) {
                    dbPdConfigRelList = dbPdConfigRelListNew;
                }
            }
        }
        return dbPdConfigRelList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDbPdConfigRelList() {
        dbPdConfigRelList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
