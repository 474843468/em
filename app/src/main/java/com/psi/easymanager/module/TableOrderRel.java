package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxTableInfoDao;
import com.psi.easymanager.dao.TableOrderRelDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END

/**
 * 桌台和订单Rel
 */
public class TableOrderRel implements java.io.Serializable {

    private Long id;
    /**
     * 订单结束时间
     */
     @Expose
    private java.util.Date orderEndTime;
    private Long pxOrderInfoId;
    private Long pxTableInfoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient TableOrderRelDao myDao;

    private PxOrderInfo dbOrder;
    private Long dbOrder__resolvedKey;

    private PxTableInfo dbTable;
    private Long dbTable__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public TableOrderRel() {
    }

    public TableOrderRel(Long id) {
        this.id = id;
    }

    public TableOrderRel(Long id, java.util.Date orderEndTime, Long pxOrderInfoId, Long pxTableInfoId) {
        this.id = id;
        this.orderEndTime = orderEndTime;
        this.pxOrderInfoId = pxOrderInfoId;
        this.pxTableInfoId = pxTableInfoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTableOrderRelDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getOrderEndTime() {
        return orderEndTime;
    }

    public void setOrderEndTime(java.util.Date orderEndTime) {
        this.orderEndTime = orderEndTime;
    }

    public Long getPxOrderInfoId() {
        return pxOrderInfoId;
    }

    public void setPxOrderInfoId(Long pxOrderInfoId) {
        this.pxOrderInfoId = pxOrderInfoId;
    }

    public Long getPxTableInfoId() {
        return pxTableInfoId;
    }

    public void setPxTableInfoId(Long pxTableInfoId) {
        this.pxTableInfoId = pxTableInfoId;
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderInfo getDbOrder() {
        Long __key = this.pxOrderInfoId;
        if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
            PxOrderInfo dbOrderNew = targetDao.load(__key);
            synchronized (this) {
                dbOrder = dbOrderNew;
            	dbOrder__resolvedKey = __key;
            }
        }
        return dbOrder;
    }

    public void setDbOrder(PxOrderInfo dbOrder) {
        synchronized (this) {
            this.dbOrder = dbOrder;
            pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
            dbOrder__resolvedKey = pxOrderInfoId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public PxTableInfo getDbTable() {
        Long __key = this.pxTableInfoId;
        if (dbTable__resolvedKey == null || !dbTable__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxTableInfoDao targetDao = daoSession.getPxTableInfoDao();
            PxTableInfo dbTableNew = targetDao.load(__key);
            synchronized (this) {
                dbTable = dbTableNew;
            	dbTable__resolvedKey = __key;
            }
        }
        return dbTable;
    }

    public void setDbTable(PxTableInfo dbTable) {
        synchronized (this) {
            this.dbTable = dbTable;
            pxTableInfoId = dbTable == null ? null : dbTable.getId();
            dbTable__resolvedKey = pxTableInfoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
