package com.psi.easymanager.module;

import android.text.TextUtils;
import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PrintDetailsDao;
import com.psi.easymanager.dao.PxFormatInfoDao;
import com.psi.easymanager.dao.PxMethodInfoDao;
import com.psi.easymanager.dao.PxOptReasonDao;
import com.psi.easymanager.dao.PxOrderInfoDao;
import com.psi.easymanager.dao.PxProductInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END

/**
 * 打印信息
 */
public class PrintDetails implements java.io.Serializable {

  private Long id;
  /**
   * 商品状态(0:正常 1：延迟)
   */
  @Expose private String status;
  /**
   * 下单状态(0:未下单,1:已下单,2:退货)
   */
  @Expose private String orderStatus;
  /**
   * 数量
   */
  @Expose private Double num;
  /**
   * 多单位数量 一般为重量
   */
  @Expose private Double multipleUnitNumber;
  /**
   * 备注
   */
  @Expose private String remarks;
  /**
   * 是否为套餐内的Details
   */
  @Expose private String inCombo;
  private Long pxProductInfoId;
  private Long pxOrderInfoId;
  private Long pxOptReasonId;
  private Long pxFormatInfoId;
  private Long pxMethodInfoId;
  /**
   * 规格名称
   */
  private String formatName;
  /**
   * 做法名称
   */
  private String methodName;
  /**
   * 退撤菜原因
   */
  private String reasonName;

  /** Used to resolve relations */
  private transient DaoSession daoSession;

  /** Used for active entity operations. */
  private transient PrintDetailsDao myDao;

  private PxProductInfo dbProduct;
  private Long dbProduct__resolvedKey;

  private PxOrderInfo dbOrder;
  private Long dbOrder__resolvedKey;

  private PxOptReason dbReason;
  private Long dbReason__resolvedKey;

  private PxFormatInfo dbFormatInfo;
  private Long dbFormatInfo__resolvedKey;

  private PxMethodInfo dbMethodInfo;
  private Long dbMethodInfo__resolvedKey;

  // KEEP FIELDS - put your custom fields here
  public static final String IN_COMBO_TRUE = "1";
  // KEEP FIELDS END

  public PrintDetails() {
  }

  public PrintDetails(Long id) {
    this.id = id;
  }

  public PrintDetails(Long id, String status, String orderStatus, Double num,
      Double multipleUnitNumber, String remarks, String inCombo, Long pxProductInfoId,
      Long pxOrderInfoId, Long pxOptReasonId, Long pxFormatInfoId, Long pxMethodInfoId,
      String formatName, String methodName, String reasonName) {
    this.id = id;
    this.status = status;
    this.orderStatus = orderStatus;
    this.num = num;
    this.multipleUnitNumber = multipleUnitNumber;
    this.remarks = remarks;
    this.inCombo = inCombo;
    this.pxProductInfoId = pxProductInfoId;
    this.pxOrderInfoId = pxOrderInfoId;
    this.pxOptReasonId = pxOptReasonId;
    this.pxFormatInfoId = pxFormatInfoId;
    this.pxMethodInfoId = pxMethodInfoId;
    this.formatName = formatName;
    this.methodName = methodName;
    this.reasonName = reasonName;
  }

  /** called by internal mechanisms, do not call yourself. */
  public void __setDaoSession(DaoSession daoSession) {
    this.daoSession = daoSession;
    myDao = daoSession != null ? daoSession.getPrintDetailsDao() : null;
  }

  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public String getOrderStatus() {
    return orderStatus;
  }

  public void setOrderStatus(String orderStatus) {
    this.orderStatus = orderStatus;
  }

  public Double getNum() {
    return num;
  }

  public void setNum(Double num) {
    this.num = num;
  }

  public Double getMultipleUnitNumber() {
    return multipleUnitNumber;
  }

  public void setMultipleUnitNumber(Double multipleUnitNumber) {
    this.multipleUnitNumber = multipleUnitNumber;
  }

  public String getRemarks() {
    return remarks;
  }

  public void setRemarks(String remarks) {
    this.remarks = remarks;
  }

  public String getInCombo() {
    return inCombo;
  }

  public void setInCombo(String inCombo) {
    this.inCombo = inCombo;
  }

  public Long getPxProductInfoId() {
    return pxProductInfoId;
  }

  public void setPxProductInfoId(Long pxProductInfoId) {
    this.pxProductInfoId = pxProductInfoId;
  }

  public Long getPxOrderInfoId() {
    return pxOrderInfoId;
  }

  public void setPxOrderInfoId(Long pxOrderInfoId) {
    this.pxOrderInfoId = pxOrderInfoId;
  }

  public Long getPxOptReasonId() {
    return pxOptReasonId;
  }

  public void setPxOptReasonId(Long pxOptReasonId) {
    this.pxOptReasonId = pxOptReasonId;
  }

  public Long getPxFormatInfoId() {
    return pxFormatInfoId;
  }

  public void setPxFormatInfoId(Long pxFormatInfoId) {
    this.pxFormatInfoId = pxFormatInfoId;
  }

  public Long getPxMethodInfoId() {
    return pxMethodInfoId;
  }

  public void setPxMethodInfoId(Long pxMethodInfoId) {
    this.pxMethodInfoId = pxMethodInfoId;
  }

  public void setFormatName(String formatName) {
    this.formatName = formatName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }

  public void setReasonName(String reasonName) {
    this.reasonName = reasonName;
  }

  /** To-one relationship, resolved on first access. */
  public PxProductInfo getDbProduct() {
    Long __key = this.pxProductInfoId;
    if (dbProduct__resolvedKey == null || !dbProduct__resolvedKey.equals(__key)) {
      if (daoSession == null) {
        throw new DaoException("Entity is detached from DAO context");
      }
      PxProductInfoDao targetDao = daoSession.getPxProductInfoDao();
      PxProductInfo dbProductNew = targetDao.load(__key);
      synchronized (this) {
        dbProduct = dbProductNew;
        dbProduct__resolvedKey = __key;
      }
    }
    return dbProduct;
  }

  public void setDbProduct(PxProductInfo dbProduct) {
    synchronized (this) {
      this.dbProduct = dbProduct;
      pxProductInfoId = dbProduct == null ? null : dbProduct.getId();
      dbProduct__resolvedKey = pxProductInfoId;
    }
  }

  /** To-one relationship, resolved on first access. */
  public PxOrderInfo getDbOrder() {
    Long __key = this.pxOrderInfoId;
    if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
      if (daoSession == null) {
        throw new DaoException("Entity is detached from DAO context");
      }
      PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
      PxOrderInfo dbOrderNew = targetDao.load(__key);
      synchronized (this) {
        dbOrder = dbOrderNew;
        dbOrder__resolvedKey = __key;
      }
    }
    return dbOrder;
  }

  public void setDbOrder(PxOrderInfo dbOrder) {
    synchronized (this) {
      this.dbOrder = dbOrder;
      pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
      dbOrder__resolvedKey = pxOrderInfoId;
    }
  }

  /** To-one relationship, resolved on first access. */
  //public PxOptReason getDbReason() {
  //    Long __key = this.pxOptReasonId;
  //    if (dbReason__resolvedKey == null || !dbReason__resolvedKey.equals(__key)) {
  //        if (daoSession == null) {
  //            throw new DaoException("Entity is detached from DAO context");
  //        }
  //        PxOptReasonDao targetDao = daoSession.getPxOptReasonDao();
  //        PxOptReason dbReasonNew = targetDao.load(__key);
  //        synchronized (this) {
  //            dbReason = dbReasonNew;
  //        	dbReason__resolvedKey = __key;
  //        }
  //    }
  //    return dbReason;
  //}
  public void setDbReason(PxOptReason dbReason) {
    synchronized (this) {
      this.dbReason = dbReason;
      pxOptReasonId = dbReason == null ? null : dbReason.getId();
      dbReason__resolvedKey = pxOptReasonId;
    }
  }

  /** To-one relationship, resolved on first access. */
  //public PxFormatInfo getDbFormatInfo() {
  //    Long __key = this.pxFormatInfoId;
  //    if (dbFormatInfo__resolvedKey == null || !dbFormatInfo__resolvedKey.equals(__key)) {
  //        if (daoSession == null) {
  //            throw new DaoException("Entity is detached from DAO context");
  //        }
  //        PxFormatInfoDao targetDao = daoSession.getPxFormatInfoDao();
  //        PxFormatInfo dbFormatInfoNew = targetDao.load(__key);
  //        synchronized (this) {
  //            dbFormatInfo = dbFormatInfoNew;
  //        	dbFormatInfo__resolvedKey = __key;
  //        }
  //    }
  //    return dbFormatInfo;
  //}
  public void setDbFormatInfo(PxFormatInfo dbFormatInfo) {
    synchronized (this) {
      this.dbFormatInfo = dbFormatInfo;
      pxFormatInfoId = dbFormatInfo == null ? null : dbFormatInfo.getId();
      dbFormatInfo__resolvedKey = pxFormatInfoId;
    }
  }

  /** To-one relationship, resolved on first access. */
  //public PxMethodInfo getDbMethodInfo() {
  //    Long __key = this.pxMethodInfoId;
  //    if (dbMethodInfo__resolvedKey == null || !dbMethodInfo__resolvedKey.equals(__key)) {
  //        if (daoSession == null) {
  //            throw new DaoException("Entity is detached from DAO context");
  //        }
  //        PxMethodInfoDao targetDao = daoSession.getPxMethodInfoDao();
  //        PxMethodInfo dbMethodInfoNew = targetDao.load(__key);
  //        synchronized (this) {
  //            dbMethodInfo = dbMethodInfoNew;
  //        	dbMethodInfo__resolvedKey = __key;
  //        }
  //    }
  //    return dbMethodInfo;
  //}
  public void setDbMethodInfo(PxMethodInfo dbMethodInfo) {
    synchronized (this) {
      this.dbMethodInfo = dbMethodInfo;
      pxMethodInfoId = dbMethodInfo == null ? null : dbMethodInfo.getId();
      dbMethodInfo__resolvedKey = pxMethodInfoId;
    }
  }

  /**
   * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity
   * context.
   */
  public void delete() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.delete(this);
  }

  /**
   * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity
   * context.
   */
  public void update() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.update(this);
  }

  /**
   * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity
   * context.
   */
  public void refresh() {
    if (myDao == null) {
      throw new DaoException("Entity is detached from DAO context");
    }
    myDao.refresh(this);
  }

  public String getFormatName() {
    return formatName;
  }

  public String getMethodName() {
    return methodName;
  }

  public String getReasonName() {
    return reasonName;
  }

  // KEEP METHODS - put your custom methods here
  public String getTransformFormatName() {
    return TextUtils.isEmpty(formatName) ? "" : "(" + formatName + ")";
  }

  public String getTransformMethodName() {
    return TextUtils.isEmpty(methodName) ? "" : "(" + methodName + ")";
  }

  public String getTransformReasonName() {
    return TextUtils.isEmpty(reasonName) ? "" : "(" + reasonName + ")";
  }

  // KEEP METHODS END
}
