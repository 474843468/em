package com.psi.easymanager.module;

import com.psi.easymanager.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.psi.easymanager.dao.PxExtraDetailsDao;
import com.psi.easymanager.dao.PxOrderInfoDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import com.google.gson.annotations.Expose;
// KEEP INCLUDES END
/**
 * Entity mapped to table "ExtraDetails".
 */
public class PxExtraDetails implements java.io.Serializable {

     @Expose
    private Long id;
    /**
     * 价格
     */
     @Expose
    private Double price;
    /**
     * 已付价格
     */
     @Expose
    private Double payPrice;
    /**
     * 已打印
     */
     @Expose
    private Boolean isPrinted;
    /**
     * 开始时间
     */
     @Expose
    private java.util.Date startTime;
    /**
     * 结束时间
     */
     @Expose
    private java.util.Date stopTime;
    /**
     * 桌名
     */
     @Expose
    private String tableName;
    /**
     * 附加费名
     */
     @Expose
    private String extraName;
    /**
     * 是否为补足最低额
     */
     @Expose
    private Boolean isComplement;
    private Long pxOrderInfoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PxExtraDetailsDao myDao;

    private PxOrderInfo dbOrder;
    private Long dbOrder__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public PxExtraDetails() {
    }

    public PxExtraDetails(Long id) {
        this.id = id;
    }

    public PxExtraDetails(Long id, Double price, Double payPrice, Boolean isPrinted, java.util.Date startTime, java.util.Date stopTime, String tableName, String extraName, Boolean isComplement, Long pxOrderInfoId) {
        this.id = id;
        this.price = price;
        this.payPrice = payPrice;
        this.isPrinted = isPrinted;
        this.startTime = startTime;
        this.stopTime = stopTime;
        this.tableName = tableName;
        this.extraName = extraName;
        this.isComplement = isComplement;
        this.pxOrderInfoId = pxOrderInfoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPxExtraDetailsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getPrice() {
        return price;
    }

    public void setPrice(Double price) {
        this.price = price;
    }

    public Double getPayPrice() {
        return payPrice;
    }

    public void setPayPrice(Double payPrice) {
        this.payPrice = payPrice;
    }

    public Boolean getIsPrinted() {
        return isPrinted;
    }

    public void setIsPrinted(Boolean isPrinted) {
        this.isPrinted = isPrinted;
    }

    public java.util.Date getStartTime() {
        return startTime;
    }

    public void setStartTime(java.util.Date startTime) {
        this.startTime = startTime;
    }

    public java.util.Date getStopTime() {
        return stopTime;
    }

    public void setStopTime(java.util.Date stopTime) {
        this.stopTime = stopTime;
    }

    public String getTableName() {
        return tableName;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;
    }

    public String getExtraName() {
        return extraName;
    }

    public void setExtraName(String extraName) {
        this.extraName = extraName;
    }

    public Boolean getIsComplement() {
        return isComplement;
    }

    public void setIsComplement(Boolean isComplement) {
        this.isComplement = isComplement;
    }

    public Long getPxOrderInfoId() {
        return pxOrderInfoId;
    }

    public void setPxOrderInfoId(Long pxOrderInfoId) {
        this.pxOrderInfoId = pxOrderInfoId;
    }

    /** To-one relationship, resolved on first access. */
    public PxOrderInfo getDbOrder() {
        Long __key = this.pxOrderInfoId;
        if (dbOrder__resolvedKey == null || !dbOrder__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PxOrderInfoDao targetDao = daoSession.getPxOrderInfoDao();
            PxOrderInfo dbOrderNew = targetDao.load(__key);
            synchronized (this) {
                dbOrder = dbOrderNew;
            	dbOrder__resolvedKey = __key;
            }
        }
        return dbOrder;
    }

    public void setDbOrder(PxOrderInfo dbOrder) {
        synchronized (this) {
            this.dbOrder = dbOrder;
            pxOrderInfoId = dbOrder == null ? null : dbOrder.getId();
            dbOrder__resolvedKey = pxOrderInfoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
